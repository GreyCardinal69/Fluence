using Fluence.RuntimeTypes;
using static Fluence.FluenceByteCode;
using static Fluence.FluenceByteCode.InstructionLine;
using static Fluence.FluenceInterpreter;
using static Fluence.Token;

namespace Fluence
{
    internal sealed class FluenceParser
    {
        private FluenceLexer _lexer;

        /// <summary>
        /// A secondary, temporary lexer used exclusively during the pre-pass to tokenize
        /// the default value expressions for struct fields without disturbing the main lexer's state.
        /// </summary>
        private FluenceLexer _fieldLexer;

        private readonly ParseState _currentParseState;

        /// <summary>
        /// Marks the index of the last bytecode instruction, up to which the bytecode has already been passed through by
        /// the <see cref="FluenceOptimizer"/>.
        /// </summary>
        private int _lastOptimizationIndex;

        private readonly FluenceIntrinsics _intrinsicsManager;

        /// <summary>
        /// Indicates that we are parsing a multi-file Fluence project.
        /// </summary>
        private readonly bool _multiFileProject;

        /// <summary>
        /// The stack of all Fluence script file paths in the target project's root directory and its children.
        /// </summary>
        private readonly Stack<string> _fileStack;

        /// <summary>
        /// Indicates which file, if in a multi-file Fluence project, is being parsed at the moment.
        /// </summary>
        private string _currentParsingFileName;

        /// <summary>
        /// Default line output for the parser's debug methods.
        /// </summary>
        private readonly TextOutputMethod _outputLine;

        /// <summary>
        /// Exposes the global scope of the current parsing state, primarily for the intrinsic registrar.
        /// </summary>
        internal FluenceScope CurrentParserStateGlobalScope => _currentParseState.GlobalScope;

        /// <summary>
        /// Exposes the final, compiled bytecode after the Parse() method has completed.
        /// </summary>
        public List<InstructionLine> CompiledCode => _currentParseState.CodeInstructions;

        internal FluenceIntrinsics Intrinsics => _intrinsicsManager;

        internal ParseState CurrentParseState => _currentParseState;

        internal FluenceLexer Lexer => _lexer;

        internal bool IsMultiFileProject => _multiFileProject;

        /// <summary>
        /// Manages the context for a `loop`, `while`, or `for` statement, tracking all `break` and `continue`
        /// instructions that need to be back-patched.
        /// </summary>
        internal sealed class LoopContext
        {
            /// <summary>
            /// A list of `Goto` instructions generated by `continue` statements, which need their target addresses patched.
            /// </summary>
            internal List<int> ContinuePatchAddresses { get; } = new List<int>();

            /// <summary>
            /// A list of `Goto` instructions generated by `break` statements, which need their target addresses patched.
            /// </summary>
            internal List<int> BreakPatchAddresses { get; } = new List<int>();
        }

        /// <summary>
        /// Manages the context for a switch-style `match` statement, tracking `break` instructions.
        /// </summary>
        internal sealed class MatchContext
        {
            /// <summary>
            /// A list of `Goto` instructions generated by `break` statements within the match block.
            /// </summary>
            internal List<int> BreakPatches { get; } = new List<int>();
        }

        /// <summary>
        /// Encapsulates all the mutable state required for a single parsing operation.
        /// </summary>
        internal sealed class ParseState
        {
            /// <summary>The main list of generated bytecode.</summary>
            internal List<InstructionLine> CodeInstructions = new List<InstructionLine>();

            /// <summary>A stack to manage nested loop contexts for `break` and `continue`.</summary>
            internal readonly Stack<LoopContext> ActiveLoopContexts = new Stack<LoopContext>();

            /// <summary>A stack to manage nested match statement contexts for `break`.</summary>
            internal readonly Stack<MatchContext> ActiveMatchContexts = new Stack<MatchContext>();

            /// <summary>A temporary list that collects all function/method `Assign` instructions during parsing.</summary>
            internal readonly List<InstructionLine> FunctionVariableDeclarations = new List<InstructionLine>();

            /// <summary>If in a multi-line project, stores the file paths of the project's .fl Fluence scripts.</summary>
            internal readonly List<string> ProjectFilePaths = new List<string>();

            /// <summary> Holds the reference to the parser. </summary>
            internal readonly FluenceParser ParserInstance;

            /// <summary>
            /// A temporary list that collects bytecode instructions for the initialization of scope global variables.
            /// Those bytecodes are placed before call to main, but after functions have been assigned.
            /// </summary>
            internal readonly List<InstructionLine> ScriptInitializerCode = new List<InstructionLine>();

            /// <summary>
            /// Indicates whether the current expression, statement is inside a function, or within a raw scope.
            /// </summary>
            internal bool IsParsingFunctionBody { get; set; }

            internal bool IsParsingStaticSolid { get; set; }

            /// <summary>The struct symbol currently being parsed, or null.</summary>
            internal StructSymbol CurrentStructContext { get; set; }

            /// <summary>The top-level global scope.</summary>
            internal FluenceScope GlobalScope { get; }

            /// <summary>The current scope (global or a namespace) the parser is in.</summary>
            internal FluenceScope CurrentScope { get; set; }

            /// <summary>A dictionary of all declared namespaces.</summary>
            internal Dictionary<string, FluenceScope> NameSpaces { get; } = new Dictionary<string, FluenceScope>();

            /// <summary>A counter for generating unique temporary variable names.</summary>
            internal int NextTempNumber;

            internal void AddFunctionVariableDeclaration(InstructionLine instructionLine)
            {
                FunctionVariableDeclarations.Add(instructionLine);
            }

            /// <summary>
            /// Indicates that we are working with test code, usually test units, which use incomplete code,
            /// simple statements or expressions. In this case we add all instructions into <see cref="CodeInstructions"/> regardless of state.
            /// </summary>
            internal bool AllowTestCode { get; set; }

            internal void AddCodeInstruction(InstructionLine instructionLine)
            {
                Token token = ParserInstance._lexer.PeekCurrentToken();

                instructionLine.SetDebugInfo(token.ColumnInSourceCode, token.LineInSourceCode, ParserInstance._multiFileProject ? ProjectFilePaths.IndexOf(ParserInstance._currentParsingFileName) : -1);

                if (!AllowTestCode && (!IsParsingFunctionBody || IsParsingStaticSolid))
                {
                    ScriptInitializerCode.Add(instructionLine);
                    return;
                }

                CodeInstructions.Add(instructionLine);
            }

            public ParseState(FluenceParser parser)
            {
                ParserInstance = parser;
                IsParsingFunctionBody = false;
                GlobalScope = new FluenceScope(null!, "Global");
                CurrentScope = GlobalScope;
            }

            /// <summary>
            /// Inserts the collected function declarations into the main bytecode stream,
            /// typically right before the final `Call Main` instruction.
            /// </summary>
            internal void InsertFunctionVariableDeclarations()
            {
                CodeInstructions.InsertRange(CodeInstructions.Count, FunctionVariableDeclarations);
            }
        }

        internal FluenceParser(string root, TextOutputMethod outLine, TextOutputMethod outNormal, TextInputMethod input)
        {
            _currentParseState = new ParseState(this);
            _multiFileProject = true;
            _fileStack = new Stack<string>();

            foreach (string item in Directory.GetFiles(root, "*", SearchOption.AllDirectories))
            {
                _currentParseState.ProjectFilePaths.Add(item);
                _fileStack.Push(item);
            }

            _outputLine = outLine;
            _intrinsicsManager = new FluenceIntrinsics(this, outLine, input, outNormal);
            _intrinsicsManager.RegisterCoreGlobals();
        }

        internal FluenceParser(FluenceLexer lexer, TextOutputMethod outLine, TextOutputMethod outNormal, TextInputMethod input)
        {
            _currentParseState = new ParseState(this);
            _lexer = lexer;

            _outputLine = outLine;
            _intrinsicsManager = new FluenceIntrinsics(this, outLine, input, outNormal);
            _intrinsicsManager.RegisterCoreGlobals();
        }

        /// <summary>
        /// Parses the entire source code. If allowTestCode is true, parses partial code
        /// ( Only used in tests to test small snippets, this omits the Main function declaration
        /// and Main function call bytecode checks. )
        /// </summary>
        /// <param name="allowTestCode"></param>
        internal void Parse(bool allowTestCode = false)
        {
            _currentParseState.AllowTestCode = allowTestCode;

            if (_multiFileProject)
            {
                ParseProjectTokens();
            }
            else
            {
                ParseTokens();
            }

            if (!allowTestCode)
            {
                FunctionSymbol mainFunctionSymbol = FindEntryPoint();

                if (mainFunctionSymbol == null)
                {
                    ConstructAndThrowParserException("Could not find a 'Main' function entry point.", new Token(TokenType.UNKNOWN));
                    return;
                }

                _currentParseState.GlobalScope.Declare("Main", mainFunctionSymbol);
            }

            // We first insert the function declarations.
            // Then we insert the all the scopes' global variables' intialization bytecodes.
            // Finally we call Main.
            _currentParseState.InsertFunctionVariableDeclarations();

            if (_currentParseState.ScriptInitializerCode.Count > 0)
            {
                _currentParseState.CodeInstructions.InsertRange(_currentParseState.CodeInstructions.Count, _currentParseState.ScriptInitializerCode);
            }

            _currentParseState.IsParsingFunctionBody = true;
            _currentParseState.AddCodeInstruction(
                new InstructionLine(
                    InstructionCode.CallFunction,
                    new TempValue(_currentParseState.NextTempNumber++),
                    new VariableValue("Main__0"),
                    NumberValue.Zero
                )
            );

            // We add a universal TERMINATE instruction for the VM, at the very end of the generated byte code.
            // Both for convenience and so that we dont end on dangling instructions, like add and any other.
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Terminate, null!));
        }

        internal void AddNameSpace(FluenceScope nameSpace)
        {
            _currentParseState.NameSpaces.TryAdd(nameSpace.Name, nameSpace);
        }

        private void ParseProjectTokens()
        {
            while (_fileStack.Count != 0)
            {
                string path = _fileStack.Pop();
                using FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read);
                using StreamReader sr = new StreamReader(fs);
                _lexer = new FluenceLexer(sr.ReadToEnd(), path);
                _lexer.LexFullSource();
                _lexer.RemoveLexerEOLS();

                _currentParsingFileName = path;

#if DEBUG
                _lexer.DumpTokenStream("Initial Token Stream (Before Pre-Parsing declarations)", _outputLine);
#endif

                ParseDeclarations(0, _lexer.TokenCount);

#if DEBUG
                _lexer.DumpTokenStream("Token stream after parsing declarations.", _outputLine);
#endif

                while (!_lexer.HasReachedEnd)
                {
                    // We reached end of file, so we just quit.
                    if (_lexer.TokenTypeMatches(TokenType.EOF))
                    {
                        _lexer.Advance();
                        break;
                    }

                    ParseStatement();
                }
            }
        }

        private void ParseTokens()
        {
            _lexer.LexFullSource();
            _lexer.RemoveLexerEOLS();

#if DEBUG
            _lexer.DumpTokenStream("Initial Token Stream (Before Pre-Parsing declarations)", _outputLine);
#endif

            ParseDeclarations(0, _lexer.TokenCount);

#if DEBUG
            _lexer.DumpTokenStream("Token stream after parsing declarations.", _outputLine);
#endif

            while (!_lexer.HasReachedEnd)
            {
                // We reached end of file, so we just quit.
                if (_lexer.TokenTypeMatches(TokenType.EOF))
                {
                    _lexer.Advance();
                    break;
                }

                ParseStatement();
            }
        }

        /// <summary>
        /// Searches for the main entry point function "Main" for the program.
        /// </summary>
        /// <returns>The FunctionSymbol for the entry point, or null if not found.</returns>
        private FunctionSymbol FindEntryPoint()
        {
            if (_currentParseState.GlobalScope.TryResolve("Main__0", out Symbol? globalMainSymbol))
            {
                return (FunctionSymbol)globalMainSymbol;
            }

            foreach (FluenceScope scope in _currentParseState.NameSpaces.Values)
            {
                if (scope.TryResolve("Main__0", out Symbol mainFunc))
                {
                    return (FunctionSymbol)mainFunc;
                }
            }

            return null!; // No entry point found.
        }

        /// <summary>
        /// The main entry point for the first-pass. It initiates a recursive scan of the token stream
        /// to build the entire symbol and namespace hierarchy.
        /// </summary>
        private void ParseDeclarations(int start, int end)
        {
            int currentIndex = start;
            while (currentIndex < end)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

                if (type == TokenType.EOF) break;

                if (type == TokenType.SPACE)
                {
                    int namespaceNameIndex = currentIndex + 1;
                    int namespaceEndIndex = FindMatchingBrace(namespaceNameIndex);
                    string namespaceName = _lexer.PeekAheadByN(namespaceNameIndex + 1).Text;

                    FluenceScope parentScope = _currentParseState.CurrentScope;
                    FluenceScope namespaceScope = _currentParseState.NameSpaces.TryGetValue(namespaceName, out FluenceScope scope)
                        ? scope
                        : new FluenceScope(parentScope, namespaceName);

                    _currentParseState.NameSpaces.Add(namespaceName, namespaceScope);

                    _currentParseState.CurrentScope = namespaceScope;
                    ParseDeclarations(namespaceNameIndex + 2, namespaceEndIndex + 1);

                    _currentParseState.CurrentScope = parentScope;
                    currentIndex = namespaceEndIndex + 1;
                    continue;
                }

                if (type == TokenType.ENUM)
                {
                    int declarationStartIndex = currentIndex;
                    int declarationEndIndex = FindMatchingBrace(declarationStartIndex + 1);

                    ParseEnumDeclaration(declarationStartIndex, declarationEndIndex);

                    int count = declarationEndIndex - declarationStartIndex + 1;
                    _lexer.RemoveTokenRange(declarationStartIndex, count);
                    continue;
                }
                else if (type == TokenType.FUNC)
                {
                    int declarationStartIndex = currentIndex;
                    int declarationEndIndex = FindFunctionHeaderDeclarationEnd(declarationStartIndex);

                    ParseFunctionHeaderDeclaration(declarationStartIndex, declarationEndIndex);

                    int functionEndIndex = FindFunctionBodyEnd(declarationEndIndex);
                    currentIndex = functionEndIndex + 1;
                    continue;
                }
                else if (type == TokenType.STRUCT)
                {
                    int declarationStartIndex = currentIndex;
                    int declarationEndIndex = FindMatchingBrace(declarationStartIndex + 1);

                    ParseStructDeclaration(declarationStartIndex, declarationEndIndex);

                    currentIndex = declarationEndIndex;
                    continue;
                }
                currentIndex++;
            }
        }

        /// <summary>
        /// Finds the index of the matching closing brace '}' for an opening brace '{',
        /// starting its scan from a given index.
        /// </summary>
        /// <param name="startIndex">The index of a token *before* the block we want to find the end of.</param>
        /// <returns>The index of the matching closing '}' token.</returns>
        private int FindMatchingBrace(int startIndex)
        {
            int currentIndex = startIndex;

            while (_lexer.PeekTokenTypeAheadByN(currentIndex + 1) != TokenType.L_BRACE)
            {
                if (_lexer.PeekTokenTypeAheadByN(currentIndex + 1) == TokenType.EOF)
                {
                    Token errorToken = _lexer.PeekAheadByN(startIndex + 1);
                    ConstructAndThrowParserException("Could not find an opening '{' to start the block scan of an Enum or Struct or Function body.", errorToken);
                }
                currentIndex++;
            }

            currentIndex++;
            int braceDepth = 1;

            while (braceDepth > 0)
            {
                if (currentIndex >= _lexer.TokenCount)
                {
                    Token eofToken = _lexer.PeekAheadByN(_lexer.TokenCount);
                    ConstructAndThrowParserException("Unclosed block. Reached end of file while looking for matching '}' for Enum or Struct or Function body.", eofToken);
                }

                TokenType currentTokenType = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

                switch (currentTokenType)
                {
                    case TokenType.L_BRACE:
                        braceDepth++;
                        break;
                    case TokenType.R_BRACE:
                        braceDepth--;
                        break;
                }

                if (braceDepth == 0)
                {
                    return currentIndex;
                }

                currentIndex++;
            }

            return currentIndex;
        }

        /// <summary>
        /// Finds the index of the '=>' arrow token that signifies the end of a function's header.
        /// </summary>
        /// <param name="startIndex">The index of the token before the 'func' keyword.</param>
        /// <returns>The index of the '=>' token.</returns>
        private int FindFunctionHeaderDeclarationEnd(int startIndex)
        {
            int currentIndex = startIndex + 1;
            while (currentIndex < _lexer.TokenCount)
            {
                TokenType tokenType = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

                if (tokenType == TokenType.ARROW)
                {
                    return currentIndex;
                }

                if (tokenType == TokenType.EOF)
                {
                    Token errorToken = _lexer.PeekAheadByN(startIndex + 1);
                    ConstructAndThrowParserException("Unterminated function header. Reached end of file before finding '=>'.", errorToken);
                }

                currentIndex++;
            }

            Token lastToken = _lexer.PeekAheadByN(_lexer.TokenCount);
            ConstructAndThrowParserException("Unterminated function header. Could not find '=>'.", lastToken);
            return -1;
        }

        /// <summary>
        /// Finds the index of the last token in a function's body.
        /// </summary>
        /// <returns>The index of the last token in the function body.</returns>
        private int FindFunctionBodyEnd(int startIndex)
        {
            int currentIndex = startIndex + 1;
            TokenType bodyStartTokenType = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

            if (bodyStartTokenType == TokenType.L_BRACE)
            {
                return FindMatchingBrace(startIndex + 1);
            }

            int parenDepth = 0;
            while (true)
            {
                // Sanity check to prevent infinite loops on malformed code.
                if (currentIndex >= _lexer.TokenCount - 1)
                {
                    // Reached the end of the file, which can be a valid end for the last function.
                    return currentIndex;
                }

                TokenType currentTokenType = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

                if (currentTokenType == TokenType.L_PAREN) parenDepth++;
                else if (currentTokenType == TokenType.R_PAREN) parenDepth--;

                // A semicolon (EOL) only terminates the statement if we are not inside parentheses.
                if (currentTokenType == TokenType.EOL && parenDepth == 0)
                {
                    return currentIndex;
                }

                currentIndex++;
            }
        }

        /// <summary>
        /// Parses a function header during the first-pass to create its FunctionSymbol in the symbol table.
        /// This method only extracts the name and arity; it does not generate any bytecode.
        /// </summary>
        /// <param name="startTokenIndex">The index of the token before the 'func' keyword.</param>
        /// <param name="endTokenIndex">The index of the '=>' arrow token, marking the end of the header.</param>
        private void ParseFunctionHeaderDeclaration(int startTokenIndex, int endTokenIndex)
        {
            Token nameToken = _lexer.PeekAheadByN(startTokenIndex + 2);
            string funcName = nameToken.Text;

            int arity = 0;
            // Start scanning for members after the opening '('.
            // aka `func Name (`.
            int currentIndex = startTokenIndex + 3;
            List<string> paramaters = new List<string>();
            HashSet<string> paramatersByRef = new HashSet<string>();
            bool paramByRef = false;

            while (currentIndex < endTokenIndex)
            {
                TokenType currentTokenType = _lexer.PeekTokenTypeAheadByN(currentIndex + 1);

                if (currentTokenType == TokenType.REF)
                {
                    paramByRef = true;

                    if (_lexer.PeekTokenTypeAheadByN(currentIndex + 2) != TokenType.IDENTIFIER)
                    {
                        ConstructAndThrowParserException("Expected an argument identifier after a 'ref' keyword", _lexer.PeekCurrentToken());
                    }
                }
                if (currentTokenType == TokenType.IDENTIFIER)
                {
                    paramaters.Add(_lexer.PeekAheadByN(currentIndex + 1).Text);
                    if (paramByRef)
                    {
                        paramatersByRef.Add(_lexer.PeekAheadByN(currentIndex + 1).Text);
                        paramByRef = false;
                    }
                    arity++;
                    currentIndex++;
                }
                else if (currentTokenType is TokenType.COMMA or TokenType.R_PAREN)
                {
                    currentIndex++;
                }

                currentIndex++;
            }

            string parsedName = funcName.EndsWith($"__{arity}", StringComparison.Ordinal) ? funcName : Mangler.Mangle(funcName, arity);
            FunctionSymbol functionSymbol = new FunctionSymbol(parsedName, arity, -1, nameToken.LineInSourceCode, _currentParseState.CurrentScope, paramaters, paramatersByRef);

            _lexer.ModifyTokenAt(startTokenIndex + 1, new Token(TokenType.IDENTIFIER, parsedName, nameToken.Literal, nameToken.LineInSourceCode, nameToken.ColumnInSourceCode));
            _currentParseState.CurrentScope.Declare(parsedName, functionSymbol);
        }

        /// <summary>
        /// Parses a struct declaration during the first-pass to build its complete symbol.
        /// This involves identifying all fields, default value expressions, methods, and the constructor.
        /// </summary>
        /// <param name="startTokenIndex">The index of the token before the 'struct' keyword.</param>
        /// <param name="endTokenIndex">The index of the closing '}' token.</param>
        private void ParseStructDeclaration(int startTokenIndex, int endTokenIndex)
        {
            Token nameToken = _lexer.PeekAheadByN(startTokenIndex + 2);
            string structName = nameToken.Text;
            StructSymbol structSymbol = new StructSymbol(structName, _currentParseState.CurrentScope);

            int currentIndex = startTokenIndex + 3;
            bool solidField = false;
            bool argByRef = false;

            while (currentIndex < endTokenIndex)
            {
                Token token = _lexer.PeekAheadByN(currentIndex + 1);

                if (token.Type == TokenType.ENUM)
                {
                    int start = currentIndex + 1;
                    int end = start;

                    while (true)
                    {
                        end++;

                        if (_lexer.PeekTokenTypeAheadByN(end) == TokenType.R_BRACE)
                        {
                            break;
                        }
                    }

                    ParseDeclarations(start - 1, end - 1);
                    endTokenIndex -= end - start;
                    continue;
                }

                if (token.Type == TokenType.SOLID)
                {
                    solidField = true;
                    continue;
                }

                if (token.Type == TokenType.REF)
                {
                    argByRef = true;

                    if (_lexer.PeekNextTokenType() != TokenType.IDENTIFIER)
                    {
                        ConstructAndThrowParserException("Expected an argument identifier after a 'ref' keyword", _lexer.PeekCurrentToken());
                    }
                    continue;
                }

                if (token.Type == TokenType.IDENTIFIER)
                {
                    structSymbol.Fields.Add(token.Text);

                    int statementEndIndex = currentIndex + 1;
                    while (statementEndIndex < endTokenIndex && _lexer.PeekTokenTypeAheadByN(statementEndIndex + 1) != TokenType.EOL)
                    {
                        statementEndIndex++;
                    }

                    List<Token> defaultValueTokens = new List<Token>();

                    for (int z = currentIndex + 3; z <= statementEndIndex; z++)
                    {
                        defaultValueTokens.Add(_lexer.PeekAheadByN(z));
                    }

                    if (solidField)
                    {
                        solidField = false;
                        // A workaround of sorts.
                        structSymbol.StaticFields.Add(token.Text, new RuntimeValue(null!));
                    }

                    structSymbol.DefaultFieldValuesAsTokens.TryAdd(token.Text, defaultValueTokens);

                    currentIndex = statementEndIndex + 1;
                    continue;
                }

                if (token.Type == TokenType.FUNC)
                {
                    Token funcToken = _lexer.PeekAheadByN(currentIndex + 2);
                    string funcName = funcToken.Text;

                    int headerEndIndex = currentIndex + 1;
                    while (headerEndIndex < endTokenIndex && _lexer.PeekTokenTypeAheadByN(headerEndIndex + 1) != TokenType.ARROW)
                    {
                        headerEndIndex++;
                    }

                    List<string> args = new List<string>();
                    HashSet<string> argsByRef = new HashSet<string>();

                    int arity = 0;
                    for (int argScanIndex = currentIndex + 3; argScanIndex < headerEndIndex; argScanIndex++)
                    {
                        if (_lexer.PeekTokenTypeAheadByN(argScanIndex + 1) == TokenType.REF)
                        {
                            argByRef = true;

                            if (_lexer.PeekTokenTypeAheadByN(argScanIndex + 2) != TokenType.IDENTIFIER)
                            {
                                ConstructAndThrowParserException("Expected an argument identifier after a 'ref' keyword", _lexer.PeekCurrentToken());
                            }
                        }
                        else if (_lexer.PeekTokenTypeAheadByN(argScanIndex + 1) == TokenType.IDENTIFIER)
                        {
                            Token argToken = _lexer.PeekAheadByN(argScanIndex + 1);
                            args.Add(argToken.Text);
                            if (argByRef)
                            {
                                argByRef = false;
                                argsByRef.Add(argToken.Text);
                            }
                            arity++;
                        }
                    }

                    FunctionValue functionValue = new FunctionValue(funcName, arity, -1, nameToken.LineInSourceCode, args, argsByRef);
                    functionValue.SetScope(_currentParseState.CurrentScope);
                    string templated;

                    if (funcName == "init")
                    {
                        templated = Mangler.Mangle("init", args.Count);
                        if (!structSymbol.Constructors.TryAdd(templated, functionValue))
                        {
                            ConstructAndThrowParserException($"Constructor with '{args.Count}' arity is already defined in the struct '{structName}'.", funcToken);
                        }

                        _lexer.ModifyTokenAt(currentIndex + 1, new Token(TokenType.IDENTIFIER, templated, nameToken.Literal, nameToken.LineInSourceCode, nameToken.ColumnInSourceCode));
                    }
                    else
                    {
                        templated = Mangler.Mangle(funcName, args.Count);
                        if (!structSymbol.Functions.TryAdd(templated, functionValue))
                        {
                            ConstructAndThrowParserException($"Method '{funcName}' with '{args.Count}' arity is already defined in the struct '{structName}'.", funcToken);
                        }

                        _lexer.ModifyTokenAt(currentIndex + 1, new Token(TokenType.IDENTIFIER, templated, nameToken.Literal, nameToken.LineInSourceCode, nameToken.ColumnInSourceCode));
                    }

                    int functionBodyEndIndex = FindFunctionBodyEnd(headerEndIndex);
                    currentIndex = functionBodyEndIndex + 1;
                    continue;
                }

                currentIndex++;
            }

            if (!_currentParseState.CurrentScope.Declare(structName, structSymbol))
            {
                ConstructAndThrowParserException($"A symbol named '{structName}' is already defined in this scope.", nameToken);
            }
        }

        /// <summary>
        /// Parses an enum declaration during the pre-pass to populate the symbol table.
        /// </summary>
        /// <param name="startTokenIndex">The index of the token before the 'enum' keyword.</param>
        /// <param name="endTokenIndex">The index of the closing '}' token.</param>
        private void ParseEnumDeclaration(int startTokenIndex, int endTokenIndex)
        {
            Token nameToken = _lexer.PeekAheadByN(startTokenIndex + 2);
            string enumName = nameToken.Text;
            EnumSymbol enumSymbol = new EnumSymbol(enumName);

            int currentValue = 0;
            // Start scanning for members after the '{'.
            // `enum Name {`.
            int currentIndex = startTokenIndex + 3;

            while (currentIndex < endTokenIndex)
            {
                Token currentToken = _lexer.PeekAheadByN(currentIndex + 1);

                if (currentToken.Type == TokenType.IDENTIFIER)
                {
                    string memberName = currentToken.Text;
                    if (enumSymbol.Members.ContainsKey(memberName))
                    {
                        ConstructAndThrowParserException($"Duplicate enum member '{memberName}'.", currentToken);
                    }

                    EnumValue enumValue = new EnumValue(enumName, memberName, currentValue);
                    enumSymbol.Members.Add(memberName, enumValue);
                    currentValue++;
                }
                else if (currentToken.Type is not TokenType.COMMA)
                {
                    ConstructAndThrowParserException($"Unexpected token '{currentToken.ToDisplayString()}' in enum body.", currentToken);
                }

                currentIndex++;
            }

            if (!_currentParseState.CurrentScope.Declare(enumName, enumSymbol))
            {
                ConstructAndThrowParserException($"A symbol named '{enumName}' is already defined in this scope.", nameToken);
            }
        }

        /// <summary>
        /// Parses a single, complete statement. This method is the main dispatcher for the
        /// bytecode generation pass, determining whether to parse a declaration, a control flow
        /// statement, or a simple expression statement.
        /// </summary>
        private void ParseStatement()
        {
            if (_lexer.TokenTypeMatches(TokenType.EOL))
            {
                // It's a blank line. This is a valid, empty statement.
                // Consume the EOL token and simply return. We are done with this statement.
                _lexer.Advance();
                return;
            }

            switch (_lexer.PeekNextTokenType())
            {
                // Declarations & Scoping (Second Pass).
                case TokenType.FUNC: ParseFunction(); break;
                case TokenType.STRUCT: ParseStructStatement(); break;
                case TokenType.SPACE: ParseNameSpace(); break;
                case TokenType.USE: ParseUseStatement(); break;

                // Control Flow & Block Statements.
                case TokenType.IF: ParseIfStatement(); break;
                case TokenType.WHILE: ParseWhileStatement(false); break;
                case TokenType.UNTIL: ParseWhileStatement(true); break;
                case TokenType.FOR: ParseForStatement(); break;
                case TokenType.LOOP: ParseLoopStatement(); break;
                case TokenType.MATCH: ParseMatchStatement(); break;
                case TokenType.SOLID: ParseSolidStatement(); break;
                case TokenType.UNLESS: ParseUnlessStatement(); break;

                // Simple Statements that must be terminated.
                case TokenType.RETURN:
                    ParseReturnStatement();
                    if (_lexer.PeekNextTokenType() != TokenType.TRAIN_PIPE_END) AdvanceAndExpect(TokenType.EOL, "Expected a ';' or newline after the return statement.");
                    break;
                case TokenType.BREAK:
                    _lexer.Advance(); // Consume 'break';

                    if (_currentParseState.ActiveLoopContexts.Count == 0)
                    {
                        ConstructAndThrowParserException("'break' cannot be used outside of a loop.", _lexer.PeekNextToken());
                    }

                    LoopContext currentLoop = _currentParseState.ActiveLoopContexts.Peek();

                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
                    currentLoop.BreakPatchAddresses.Add(_currentParseState.CodeInstructions.Count - 1);

                    AdvanceAndExpect(TokenType.EOL, "Expected a ';' after the 'break' statement.");
                    break;
                case TokenType.CONTINUE:
                    _lexer.Advance(); // Consume 'continue'.

                    if (_currentParseState.ActiveLoopContexts.Count == 0)
                    {
                        ConstructAndThrowParserException("'continue' cannot be used outside of a loop.", _lexer.PeekNextToken());
                    }

                    LoopContext currentLoop2 = _currentParseState.ActiveLoopContexts.Peek();

                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));

                    currentLoop2.ContinuePatchAddresses.Add(_currentParseState.CodeInstructions.Count - 1);

                    AdvanceAndExpect(TokenType.EOL, "Expected a ';' after the 'break' statement.");
                    break;
                case TokenType.TRAIN_PIPE:
                    ParseTrainPipe();
                    break;
                default:
                    ParseAssignment();
                    if (_lexer.PeekNextTokenType() is TokenType.TRAIN_PIPE or TokenType.TRAIN_PIPE_END) return;
                    AdvanceAndExpect(TokenType.EOL, "Expected a ';' to terminate the statement.");
                    break;
            }
        }

        /// <summary>
        /// Helper to parse a `space { ... }` block during the second pass.
        /// </summary>
        private void ParseNameSpace()
        {
            // In the second pass, we don't create a new namespace. We just enter it.
            AdvanceAndExpect(TokenType.SPACE, "Expected a 'space' keyword.");
            Token nameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a namespace name.");
            AdvanceAndExpect(TokenType.L_BRACE, "Expected an opening '{' for the namespace body.");

            if (!_currentParseState.NameSpaces.TryGetValue(nameToken.Text, out FluenceScope? namespaceScope))
            {
                ConstructAndThrowParserException($"Namespace '{nameToken.Text}' not found during second pass.", nameToken);
            }

            FluenceScope parentScope = _currentParseState.CurrentScope;
            _currentParseState.CurrentScope = namespaceScope!;

            // Parse all statements inside the block.
            while (!_lexer.TokenTypeMatches(TokenType.R_BRACE) && !_lexer.HasReachedEnd)
            {
                ParseStatement();
            }
            AdvanceAndExpect(TokenType.R_BRACE, "Expected a closing '}' for the namespace body.");

            _currentParseState.CurrentScope = parentScope;
        }

        /// <summary>
        /// Parses the body of a struct during the second (bytecode generation) pass.
        /// Its primary responsibility is to find all `func` declarations within the struct
        /// and dispatch to `ParseFunction` to generate their bytecode.
        /// </summary>
        private void ParseStructStatement()
        {
            // This is basically a second pass of structs.
            // On the first pass we create the symbol table.
            // Fields, methods, init.
            // Now we only seek to generate bytecode of the functions and
            // Patch start addresses.

            _lexer.Advance(); // Consume 'struct'.
            Token nameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a name for the struct.");

            string structName = nameToken.Text;
            AdvanceAndExpect(TokenType.L_BRACE, $"Expected an opening '{{' for struct '{structName}'.");

            if (!_currentParseState.CurrentScope.TryResolve(structName, out Symbol symbol) || symbol is not StructSymbol structSymbol)
            {
                ConstructAndThrowParserException($"Could not find the symbol for struct '{structName}'.", nameToken);
                return; // Satisfies compiler.
            }

            _currentParseState.CurrentStructContext = structSymbol;

            // Empty struct.
            if (_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                _currentParseState.CurrentStructContext = null!;
                _lexer.Advance();
                return;
            }

            int currentIndex = 1;
            while (true)
            {
                TokenType currentTokenType = _lexer.PeekNextTokenType();

                if (currentTokenType == TokenType.FUNC)
                {
                    // It's a method or constructor, so we parse it fully.
                    // We can peek ahead to see if it's the special 'init' constructor.
                    bool isInit = _lexer.PeekAheadByN(2).Text.StartsWith("init__", StringComparison.Ordinal);
                    ParseFunction(true, isInit, structName);
                }
                else
                {
                    // It's not a function, so it must be a field declaration.
                    // In this second pass, we don't need to do anything with fields,
                    // so we just consume tokens until we find the end of the line.
                    _lexer.Advance();
                    currentIndex++;
                }

                // End of struct body.
                if (currentTokenType == TokenType.R_BRACE)
                {
                    break;
                }
            }

            _currentParseState.CurrentStructContext = null!;
        }

        /// <summary>
        /// Parses a train of statements until a closing train symbol is encountered.
        /// </summary>
        private void ParseTrainPipe()
        {
            while (_lexer.PeekNextTokenType() == TokenType.TRAIN_PIPE)
            {
                _lexer.Advance();
                ParseStatement();
            }

            AdvanceAndExpect(TokenType.TRAIN_PIPE_END, "Expected a '<<-' operator to end a train pipe.");
        }

        /// <summary>
        /// Parses a `for` statement, dispatching to the correct helper based on whether
        /// it is a for-in loop or a C-style for loop.
        /// </summary>
        private void ParseForStatement()
        {
            _lexer.Advance(); // Consume 'for'.

            if (_lexer.PeekTokenTypeAheadByN(2) == TokenType.IN)
            {
                ParseForInStatement();
                return;
            }

            ParseForCStyleStatement();
        }

        /// <summary>
        /// Parses a C-style for loop.
        /// </summary>
        private void ParseForCStyleStatement()
        {
            ParseStatement();

            Value condition = ResolveValue(ParseExpression());
            int conditionCheckIndex = _currentParseState.CodeInstructions.Count;
            AdvanceAndExpect(TokenType.EOL, "Expected a ';' after the for-loop condition.");

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, condition));
            int loopExitPatchIndex = _currentParseState.CodeInstructions.Count - 1;

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int loopBodyJumpPatchIndex = _currentParseState.CodeInstructions.Count - 1;

            int incrementerStartIndex = _currentParseState.CodeInstructions.Count;
            ParseAssignment();
            AdvanceAndExpect(TokenType.EOL, "Expected a ';' after the 'for'-loop incrementer.");

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(conditionCheckIndex - 1)));

            LoopContext loopContext = new LoopContext();
            _currentParseState.ActiveLoopContexts.Push(loopContext);
            int bodyStartIndex = _currentParseState.CodeInstructions.Count;

            ParseStatementBody("Expected an '->' for a single-line 'for' loop body.");

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(incrementerStartIndex)));
            _currentParseState.CodeInstructions[loopBodyJumpPatchIndex].Lhs = new NumberValue(bodyStartIndex);

            int loopEndAddress = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[loopExitPatchIndex].Lhs = new NumberValue(loopEndAddress);

            PatchLoopExits(loopContext, loopEndAddress, incrementerStartIndex);

            _currentParseState.ActiveLoopContexts.Pop();
        }

        /// <summary>
        /// Parses a for-in loop.
        /// </summary>
        private void ParseForInStatement()
        {
            Token itemToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a loop variable name after 'for'.");
            VariableValue loopVariable = new VariableValue(itemToken.Text);

            AdvanceAndExpect(TokenType.IN, "Expected the 'in' keyword in a 'for-in' loop.");

            Value collectionExpr = ResolveValue(ParseExpression());

            LoopContext loopContext = new LoopContext();
            _currentParseState.ActiveLoopContexts.Push(loopContext);

            // Unless we use for in loop with a list, allocating a new list for a range, even if the range is 
            // only slightly large is very inefficient, so we create an iterator instead.
            if (collectionExpr is RangeValue range)
            {
                TempValue tempRangeReg = new TempValue(_currentParseState.NextTempNumber++);
                TempValue iteratorReg = new TempValue(_currentParseState.NextTempNumber++);
                TempValue valueReg = new TempValue(_currentParseState.NextTempNumber++);
                TempValue continueReg = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewRange, tempRangeReg, range));
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewIterator, iteratorReg, tempRangeReg));

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
                int jumpToConditionPatchIndex = _currentParseState.CodeInstructions.Count - 1;

                int loopBodyAddress = _currentParseState.CodeInstructions.Count;

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, loopVariable, valueReg));

                ParseStatementBody($"Expected an '->' for a single-line 'for-in' loop body.");

                int loopCheckAddress = _currentParseState.CodeInstructions.Count;
                _currentParseState.CodeInstructions[jumpToConditionPatchIndex].Lhs = new NumberValue(loopCheckAddress);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.IterNext, iteratorReg, valueReg, continueReg));

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, new NumberValue(loopBodyAddress), continueReg));

                int loopEndAddress = _currentParseState.CodeInstructions.Count;
                PatchLoopExits(loopContext, loopEndAddress, loopCheckAddress);
            }
            else
            {
                TempValue indexVar = new TempValue(_currentParseState.NextTempNumber++, "ForInIndex");
                TempValue collectionVar = new TempValue(_currentParseState.NextTempNumber++, "ForInCollectionCopy");

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, collectionVar, collectionExpr));
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, indexVar, NumberValue.Zero));

                int loopTopAddress = _currentParseState.CodeInstructions.Count;

                TempValue lengthVar = new TempValue(_currentParseState.NextTempNumber++, "ForInCollectionLen");
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GetLength, lengthVar, collectionVar));

                TempValue conditionVar = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.LessThan, conditionVar, indexVar, lengthVar));

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, conditionVar));
                int loopExitPatchIndex = _currentParseState.CodeInstructions.Count - 1;

                TempValue currentElementVar = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GetElement, currentElementVar, collectionVar, indexVar));
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, loopVariable, currentElementVar));

                ParseStatementBody($"Expected an '->' for a single-line 'for-in' loop body.");

                int continueAddress = _currentParseState.CodeInstructions.Count;
                TempValue incrementedIndex = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Add, incrementedIndex, indexVar, NumberValue.One));
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, indexVar, incrementedIndex));

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(loopTopAddress)));

                int loopEndAddress = _currentParseState.CodeInstructions.Count;
                _currentParseState.CodeInstructions[loopExitPatchIndex].Lhs = new NumberValue(loopEndAddress);
                PatchLoopExits(loopContext, loopEndAddress, continueAddress);
            }

            _currentParseState.ActiveLoopContexts.Pop();
        }

        /// <summary>
        /// Parses a while loop.
        /// </summary>
        private void ParseWhileStatement(bool parseAsUntil)
        {
            _lexer.Advance(); // Consume 'while' or 'until'.

            int loopStartIndex = _currentParseState.CodeInstructions.Count;
            Value condition = ResolveValue(ParseExpression());

            LoopContext whileContext = new LoopContext();
            _currentParseState.ActiveLoopContexts.Push(whileContext);

            _currentParseState.AddCodeInstruction(new InstructionLine(parseAsUntil ? InstructionCode.GotoIfTrue : InstructionCode.GotoIfFalse, null!, condition));
            int loopExitPatch = _currentParseState.CodeInstructions.Count - 1;

            ParseStatementBody($"Expected an '->' for a single-line {(parseAsUntil ? "Until" : "While")} loop body.");

            // We jump to the start of the loop, which is the condition check.
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(loopStartIndex)));

            int loopEndIndex = _currentParseState.CodeInstructions.Count;

            _currentParseState.CodeInstructions[loopExitPatch].Lhs = new NumberValue(loopEndIndex);

            PatchLoopExits(whileContext, loopEndIndex, loopStartIndex);
            _currentParseState.ActiveLoopContexts.Pop();
        }

        /// <summary>
        /// Parses an infinite `loop { ... }` statement.
        /// Control can only exit this loop via a `break` statement.
        /// </summary>
        private void ParseLoopStatement()
        {
            _lexer.Advance(); // Consume 'loop'.

            int loopStartIndex = _currentParseState.CodeInstructions.Count;
            LoopContext loopContext = new LoopContext();
            _currentParseState.ActiveLoopContexts.Push(loopContext);

            ParseBlockStatement();

            // After the body executes, unconditionally jump back to the start.
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(loopStartIndex)));

            int loopEndIndex = _currentParseState.CodeInstructions.Count;

            PatchLoopExits(loopContext, loopEndIndex, loopStartIndex);
            _currentParseState.ActiveLoopContexts.Pop();
        }

        /// <summary>
        /// Parses an Unless statement, the reverse of if, but without unless-else chains.
        /// </summary>
        private void ParseUnlessStatement()
        {
            _lexer.Advance(); // Consume 'unless'.

            Value condition = ResolveValue(ParseTernary());

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, condition));

            int elsePatchIndex = _currentParseState.CodeInstructions.Count - 1;

            ParseStatementBody("Expected '->' token for a single-line Unless statement body.");

            int endAddress = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[elsePatchIndex].Lhs = new NumberValue(endAddress);
        }

        /// <summary>
        /// Parses an `if-else if-else` conditional statement chain.
        /// </summary>
        private void ParseIfStatement()
        {
            _lexer.Advance(); // Consume the 'if'.
            Value condition = ResolveValue(ParseTernary());

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, condition));

            int elsePatchIndex = _currentParseState.CodeInstructions.Count - 1;

            ParseStatementBody("Expected '->' token for a single-line if statement body.");

            // else, also handles else if, we just consume the else part, call parse if with the rest.
            if (_lexer.TokenTypeMatches(TokenType.ELSE))
            {
                int elseIfJumpOverIndex = _currentParseState.CodeInstructions.Count;
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));

                _lexer.Advance();

                int elseAddress = _currentParseState.CodeInstructions.Count;
                _currentParseState.CodeInstructions[elsePatchIndex].Lhs = new NumberValue(elseAddress);

                // This is an else-if, we just call ParseIf again.
                if (_lexer.TokenTypeMatches(TokenType.IF))
                {
                    ParseStatement();
                }
                else if (_lexer.TokenTypeMatches(TokenType.L_BRACE))
                {
                    ParseBlockStatement();
                }
                else // single line 'else'.
                {
                    AdvanceAndExpect(TokenType.THIN_ARROW, "Expected '->' token for single line if/else/else-if statement");
                    ParseStatement();
                }

                _currentParseState.CodeInstructions[elseIfJumpOverIndex].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
            }
            else
            {
                // No other else/else-ifs.
                int endAddress = _currentParseState.CodeInstructions.Count;
                _currentParseState.CodeInstructions[elsePatchIndex].Lhs = new NumberValue(endAddress);
            }
        }

        /// <summary>
        /// Parses a `return` statement. This can be a return with a value
        /// or a return without a value which implicitly returns nil.
        /// </summary>
        private void ParseReturnStatement()
        {
            _lexer.Advance(); // Consume 'return'.

            bool nilReturn = _lexer.TokenTypeMatches(TokenType.EOL);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Return, nilReturn ? NilValue.NilInstance : ResolveValue(ParseExpression())));
        }

        /// <summary>
        /// Helper to update the symbol table with the function's start address and
        /// add the final `Assign` instruction to the declaration list.
        /// </summary>
        private void UpdateFunctionSymbolsAndGenerateDeclaration(FunctionValue funcValue, Token nameToken, bool inStruct, bool isInit, string structName)
        {
            string functionName = nameToken.Text;
            int functionStartAddress = funcValue.StartAddress;

            if (inStruct)
            {
                bool isResolved = _currentParseState.CurrentScope.TryResolve(structName, out Symbol symbol);

                if (!isResolved || symbol is not StructSymbol)
                {
                    ConstructAndThrowParserException($"Internal error: Could not resolve struct symbol '{structName}' in current scope.", nameToken);
                }

                StructSymbol structSymbol = (StructSymbol)symbol;

                if (!isInit)
                {
                    // Bytecode for solid, static fields must be generated before the application is run.
                    foreach (KeyValuePair<string, List<Token>> field in structSymbol.DefaultFieldValuesAsTokens)
                    {
                        Value defaultValueResult;
                        string fieldName = field.Key;
                        List<Token> expressionTokens = field.Value;

                        if (structSymbol.StaticFields.ContainsKey(fieldName) && !structSymbol.ParsedStaticFields.Contains(fieldName))
                        {
                            if (expressionTokens.Count == 0)
                            {
                                ConstructAndThrowParserException($"Expected an assignment of a value to a solid static struct field, value can not be Nil: {structSymbol}__Field:{fieldName}.", new Token());
                                return;
                            }
                            structSymbol.ParsedStaticFields.Add(fieldName);
                            _fieldLexer = _lexer;
                            _lexer = new FluenceLexer(expressionTokens);

                            _currentParseState.IsParsingStaticSolid = true;
                            defaultValueResult = ResolveValue(ParseExpression());
                            _currentParseState.IsParsingStaticSolid = false;

                            _lexer = _fieldLexer; // Restore the main lexer.

                            // We call SetStatic for static fields, and add to the initializer code list.
                            // This way the values are assigned before the application runs.
                            _currentParseState.ScriptInitializerCode.Add(new InstructionLine(InstructionCode.SetStatic, structSymbol, new StringValue(fieldName), defaultValueResult));
                            continue;
                        }
                    }

                    if (!structSymbol.Functions.TryGetValue(functionName, out FunctionValue functionValue))
                    {
                        ConstructAndThrowParserException($"Internal error: Method '{funcValue.Name}' not found in the symbol table for struct '{structName}'.", nameToken);
                    }

                    functionValue!.SetScope(_currentParseState.CurrentScope);
                    functionValue!.SetStartAddress(functionStartAddress);
                    _currentParseState.AddFunctionVariableDeclaration(new InstructionLine(InstructionCode.Assign, new VariableValue($"{structName}.{functionValue.Name}"), functionValue));

                    return;
                }

                // Constructor init here.
                if (structSymbol.Constructors.Count == 0)
                {
                    ConstructAndThrowParserException($"Internal error: No constructors found for struct '{structName}' in symbol table.", nameToken);
                }

                foreach (KeyValuePair<string, List<Token>> field in structSymbol.DefaultFieldValuesAsTokens)
                {
                    if (structSymbol.StaticFields.ContainsKey(field.Key))
                    {
                        continue;
                    }

                    Value defaultValueResult;
                    string fieldName = field.Key;
                    List<Token> expressionTokens = field.Value;

                    if (expressionTokens.Count == 0)
                    {
                        _currentParseState.AddCodeInstruction(
                            new InstructionLine(
                                InstructionCode.SetField,
                                new VariableValue("self"),
                                new StringValue(fieldName),
                                NilValue.NilInstance
                            )
                        );
                        continue;
                    }

                    _fieldLexer = _lexer;
                    _lexer = new FluenceLexer(expressionTokens);

                    defaultValueResult = ParseTernary();

                    _lexer = _fieldLexer; // Restore the main lexer.

                    _currentParseState.AddCodeInstruction(
                        new InstructionLine(
                            InstructionCode.SetField,
                            new VariableValue("self"),
                            new StringValue(fieldName),
                            defaultValueResult // This will be the TempValue from the 'Add' instruction.
                        )
                    );
                }

                FunctionValue constructor = structSymbol.Constructors[nameToken.Text];
                constructor.SetStartAddress(functionStartAddress);
                constructor.SetScope(_currentParseState.CurrentScope);
                _currentParseState.AddFunctionVariableDeclaration(new InstructionLine(InstructionCode.Assign, new VariableValue($"{structName}.{constructor.Name}"), constructor));
            }
            // Standalone function.
            else
            {
                // This will also work for functions defined in the current scope.
                if (!_currentParseState.CurrentScope.TryResolve(functionName, out Symbol symbol) || symbol is not FunctionSymbol functionSymbol)
                {
                    ConstructAndThrowParserException($"Internal error: Could not resolve function symbol '{funcValue.Name}'. Function does not exist.", nameToken);
                }
                else
                {
                    functionSymbol.SetStartAddress(functionStartAddress);
                    _currentParseState.AddFunctionVariableDeclaration(new InstructionLine(InstructionCode.Assign, new VariableValue($"{funcValue.Name}"), funcValue));
                }
            }
        }

        /// <summary>
        /// Parses a complete function, method, or constructor declaration and generates its bytecode.
        /// This is the main dispatcher for all `func` keyword-related parsing.
        /// </summary>
        /// <param name="inStruct">True if parsing a method within a struct body.</param>
        /// <param name="isInit">True if the method being parsed is a constructor (`init`).</param>
        /// <param name="structName">The name of the struct, if `inStruct` is true.</param>
        private void ParseFunction(bool inStruct = false, bool isInit = false, string structName = null!)
        {
            _currentParseState.IsParsingFunctionBody = true;
            (Token nameToken, List<string> parameters, HashSet<string> parametersByRef) = ParseFunctionHeader();
            string functionName = nameToken.Text;

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int functionStartAddress = _currentParseState.CodeInstructions.Count;

            FunctionValue func = new FunctionValue(functionName, parameters.Count, functionStartAddress, nameToken.LineInSourceCode, parameters, parametersByRef);
            func.SetScope(_currentParseState.CurrentScope);
            UpdateFunctionSymbolsAndGenerateDeclaration(func, nameToken, inStruct, isInit, structName);

            // Either => for one line, or => {...} for a block.
            if (_lexer.TokenTypeMatches(TokenType.L_BRACE))
            {
                ParseBlockStatement();
                if (_currentParseState.CodeInstructions[^1].Instruction != InstructionCode.Return)
                {
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Return, NilValue.NilInstance));
                }
            }
            else
            {
                Value returnValue = NilValue.NilInstance;
                // It is pleasant to do things like ... => self.x, self.t <~| ....
                // But those are statements not expressions, to allow them we check for, as of now, only assignment pipes
                // if found we parse a statement, and return nil.
                if (IsChainAssignmentAhead(out _))
                {
                    ParseStatement();
                }
                else
                {
                    returnValue = ResolveValue(ParseExpression());
                }
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Return, returnValue));
            }

            int afterBodyAddress = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[functionStartAddress - 1].Lhs = new NumberValue(afterBodyAddress);
            _currentParseState.IsParsingFunctionBody = false;

            FluenceOptimizer.OptimizeChunk(ref _currentParseState.CodeInstructions, _currentParseState, _lastOptimizationIndex);

            // Next time we call OptimizeChunk, all the bytecode before here will be skipped, to avoid repetitive, useless optimization passes.
            _lastOptimizationIndex = functionStartAddress;
        }

        /// <summary>
        /// Helper to parse the function header, from `func` up to the `=>`.
        /// </summary>
        /// <returns>A tuple containing the function's name token and a list of its parameter names.</returns>
        private (Token nameToken, List<string> parameters, HashSet<string> parametersByRef) ParseFunctionHeader()
        {
            AdvanceAndExpect(TokenType.FUNC, "Expected the 'func' keyword.");
            Token nameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a function name after 'func'.");
            AdvanceAndExpect(TokenType.L_PAREN, $"Expected an opening '(' for function '{nameToken.Text}' parameters.");

            HashSet<string> parametersByRef = new HashSet<string>();
            List<string> parameters = new List<string>();

            if (!_lexer.TokenTypeMatches(TokenType.R_PAREN))
            {
                // TO DO, allow expressions for default values.
                do
                {
                    Token next = _lexer.ConsumeToken();

                    if (next.Type == TokenType.REF)
                    {
                        bool paramByRef = true;
                        if (_lexer.PeekNextTokenType() != TokenType.IDENTIFIER)
                        {
                            ConstructAndThrowParserException("Expected an argument identifier after a 'ref' keyword", _lexer.PeekCurrentToken());
                        }

                        Token paramToken = _lexer.ConsumeToken();

                        if (paramByRef)
                        {
                            parametersByRef.Add(paramToken.Text);
                        }
                        parameters.Add(paramToken.Text);
                    }
                    else
                    {
                        parameters.Add(next.Text);
                    }
                } while (AdvanceTokenIfMatch(TokenType.COMMA));
            }

            AdvanceAndExpect(TokenType.R_PAREN, $"Expected a closing ')' after parameters for function '{nameToken.Text}'.");
            AdvanceAndExpect(TokenType.ARROW, $"Expected an '=>' to define the body of function '{nameToken.Text}'.");

            return (nameToken, parameters, parametersByRef);
        }

        /// <summary>
        /// Parses a `match` statement or expression. This method acts as a dispatcher,
        /// determining whether to parse a statement-style (`case:`) or expression-style (`case ->`) match.
        /// </summary>
        /// <returns>
        /// A <see cref="Value"/> representing the result of the match if it's an expression,
        /// or a <see cref="NilValue"/> if it's a statement.
        /// </returns>
        private Value ParseMatchStatement()
        {
            if (_lexer.TokenTypeMatches(TokenType.MATCH))
            {
                // If we have lhs = match x
                // Then match falls to ParsePrimary(), which consumes it.
                // If it is just match x {...}, match token remains, so we consume it.
                _lexer.Advance();
            }

            Value matchOn = ResolveValue(ParseTernary());

            AdvanceAndExpect(TokenType.L_BRACE, "Expected an opening '{' to begin the match block.");

            // Check for match x { } empty match.
            if (_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                _lexer.Advance(); // Consume '}'.
                return NilValue.NilInstance; // An empty match does nothing and returns nil.
            }

            if (IsSwitchStyleMatch())
            {
                ParseMatchSwitchStyle(matchOn);
                return NilValue.NilInstance;
            }

            return ParseMatchExpressionStyle(matchOn);
        }

        /// <summary>
        /// Parses a switch-style `match` statement, which does not return a value and uses `break` and fallthrough.
        /// </summary>
        /// <param name="matchOn">The value being matched against, already parsed.</param>
        private void ParseMatchSwitchStyle(Value matchOn)
        {
            // matchOn is already resolved.
            MatchContext context = new MatchContext();
            _currentParseState.ActiveMatchContexts.Push(context);

            List<int> nextCasePatches = new List<int>();
            bool fallThrough = false;
            int fallThroughSkipIndex = -1;

            while (!_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                TokenType nextType = _lexer.PeekNextTokenType();

                if (nextType == TokenType.EOL)
                {
                    _lexer.Advance();
                    continue;
                }

                int nextCaseAddress = _currentParseState.CodeInstructions.Count;
                // Patch all fall-throughs from the previous case to jump here.
                foreach (int patch in nextCasePatches)
                {
                    _currentParseState.CodeInstructions[patch].Lhs = new NumberValue(nextCaseAddress);
                }
                nextCasePatches.Clear();

                if (nextType == TokenType.REST)
                {
                    _lexer.Advance();
                }
                else
                {
                    Value pattern = ResolveValue(ParseExpression());

                    TempValue condition = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, condition, matchOn, pattern));
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, condition));

                    if (fallThrough)
                    {
                        _currentParseState.CodeInstructions[fallThroughSkipIndex].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
                        fallThrough = false;
                        fallThroughSkipIndex = 0;
                    }

                    nextCasePatches.Add(_currentParseState.CodeInstructions.Count - 1);
                }

                AdvanceAndExpect(TokenType.COLON, "Expected a ':' after the match case pattern.");

                // Parse the body after the colon.
                while (!_lexer.TokenTypeMatches(TokenType.R_BRACKET) && !_lexer.TokenTypeMatches(TokenType.REST))
                {
                    TokenType nextToken = _lexer.PeekNextTokenType();

                    if (nextToken == TokenType.BREAK)
                    {
                        _lexer.Advance();
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
                        context.BreakPatches.Add(_currentParseState.CodeInstructions.Count - 1);
                        break;
                    }

                    int lookahead = 1;
                    bool isNextCase = false;
                    while (true)
                    {
                        TokenType peekType = _lexer.PeekTokenTypeAheadByN(lookahead);
                        if (peekType == TokenType.COLON)
                        {
                            isNextCase = true;
                            break;
                        }
                        if (peekType is TokenType.R_BRACE or TokenType.EOF or TokenType.EOL)
                        {
                            // We hit the end of the block or a line break without finding a colon.
                            // This is not the start of a new case.
                            break;
                        }
                        lookahead++;
                    }

                    if (isNextCase)
                    {
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
                        fallThroughSkipIndex = _currentParseState.CodeInstructions.Count - 1;
                        fallThrough = true;
                        break;
                    }

                    // If none of the above, it's a regular statement in the case body.
                    ParseStatement();
                }

                nextCasePatches.Add(_currentParseState.CodeInstructions.Count - 1);
            }

            AdvanceAndExpect(TokenType.R_BRACE, "Expected a closing '}' to end the match statement.");

            _currentParseState.ActiveMatchContexts.Pop();

            int matchEndAddress = _currentParseState.CodeInstructions.Count;

            foreach (int patch in nextCasePatches)
            {
                _currentParseState.CodeInstructions[patch].Lhs = new NumberValue(matchEndAddress);
            }

            foreach (int patch in context.BreakPatches)
            {
                _currentParseState.CodeInstructions[patch].Lhs = new NumberValue(matchEndAddress);
            }
        }

        /// <summary>
        /// Parses a `match` expression that returns a value.
        /// </summary>
        /// <param name="matchOn">The value being matched against, already parsed.</param>
        /// <returns>A TempValue that will hold the result of the matched case at runtime.</returns>
        private TempValue ParseMatchExpressionStyle(Value matchOn)
        {
            // matchOn is already resolved.
            Value resolvedMatchOn = matchOn;
            TempValue result = new TempValue(_currentParseState.NextTempNumber++);

            List<int> endJumpPatches = new List<int>();
            bool hasRestCase = false;

            while (!_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                if (hasRestCase)
                {
                    ConstructAndThrowParserException("The 'rest' case must be the final case in a match expression.", _lexer.PeekNextToken());
                }

                int nextCasePatchIndex;
                if (_lexer.TokenTypeMatches(TokenType.REST))
                {
                    hasRestCase = true;
                    _lexer.Advance(); // Consume the 'rest'.
                    nextCasePatchIndex = -1;
                }
                else
                {
                    Value pattern = ResolveValue(ParseTernary());

                    TempValue condition = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, condition, resolvedMatchOn, pattern));

                    // We'll patch later.
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, condition));
                    nextCasePatchIndex = _currentParseState.CodeInstructions.Count - 1;
                }

                if (_lexer.TokenTypeMatches(TokenType.THIN_ARROW) && _lexer.PeekTokenTypeAheadByN(2) == TokenType.TRAIN_PIPE)
                {
                    ParseImitationBlockStatement(TokenType.THIN_ARROW, TokenType.EOL);
                }
                else if (_lexer.TokenTypeMatches(TokenType.THIN_ARROW))
                {
                    AdvanceAndExpect(TokenType.THIN_ARROW, "Expected a '->' for the match case expression.");

                    Value caseResult = ResolveValue(ParseTernary());
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, result, caseResult));
                }
                else
                {
                    AdvanceAndExpect(TokenType.ARROW, "Expected a '=>' for the match case block.");
                    int instructionCountBeforeBlock = _currentParseState.CodeInstructions.Count;
                    ParseBlockStatement();

                    if (_currentParseState.CodeInstructions.Count == instructionCountBeforeBlock ||
                        _currentParseState.CodeInstructions[^1].Instruction != InstructionCode.Return)
                    {
                        ConstructAndThrowParserException("A block body '=> { ... }' in a match expression must end with a 'return' statement.", _lexer.PeekNextToken());
                    }

                    Value returnedValue = _currentParseState.CodeInstructions[^1].Lhs;
                    _currentParseState.CodeInstructions[^1] = new InstructionLine(InstructionCode.Assign, result, returnedValue);
                }

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
                endJumpPatches.Add(_currentParseState.CodeInstructions.Count - 1);

                if (nextCasePatchIndex != -1)
                {
                    int nextCaseAddress = _currentParseState.CodeInstructions.Count;
                    _currentParseState.CodeInstructions[nextCasePatchIndex].Lhs = new NumberValue(nextCaseAddress);
                }

                AdvanceAndExpect(TokenType.EOL, "Expected a ';' after each match case.");
            }

            AdvanceAndExpect(TokenType.R_BRACE, "Expected a closing '}' to end the match expression.");

            if (!hasRestCase)
            {
                ConstructAndThrowParserException("A 'match' expression that returns a value must be exhaustive and include a 'rest' case.", _lexer.PeekNextToken());
            }

            int matchEndAddress = _currentParseState.CodeInstructions.Count;

            foreach (int endJump in endJumpPatches)
            {
                _currentParseState.CodeInstructions[endJump].Lhs = new NumberValue(matchEndAddress);
            }

            return result;
        }

        /// <summary>
        /// A simple helper to generate an `Add` instruction to concatenate two string values.
        /// </summary>
        private Value ConcatenateStringValues(Value left, Value right)
        {
            if (left == null) return right;
            if (right == null) return left;

            TempValue temp = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Add, temp, left, right));
            return temp;
        }

        /// <summary>
        /// Parses a formatted string (f-string) literal, breaking it into literal text and interpolated expressions.
        /// It generates bytecode to evaluate expressions, convert them to strings, and concatenate all parts.
        /// </summary>
        /// <param name="literal">The raw string content from the token, without the leading 'f' or quotes.</param>
        /// <returns>A Value (StringValue or TempValue) that will hold the final concatenated string at runtime.</returns>
        private Value ParseFString(object literal)
        {
            string fstringContent = literal.ToString()!;
            List<Value> stringParts = new List<Value>();
            int lastIndex = 0;

            while (lastIndex < fstringContent.Length)
            {
                int exprStart = fstringContent.IndexOf('{', lastIndex);

                if (exprStart == -1) // No more expressions found.
                {
                    string literalPart = fstringContent[lastIndex..];
                    if (!string.IsNullOrEmpty(literalPart))
                    {
                        stringParts.Add(new StringValue(literalPart));
                    }
                    break;
                }

                if (exprStart > lastIndex)
                {
                    string literalPart = fstringContent[lastIndex..exprStart];
                    stringParts.Add(new StringValue(literalPart));
                }

                int braceDepth = 1;
                int scanIndex = exprStart + 1;

                while (braceDepth > 0 && scanIndex < fstringContent.Length)
                {
                    char c = fstringContent[scanIndex];
                    if (c == '{') braceDepth++;
                    else if (c == '}') braceDepth--;
                    scanIndex++;
                }

                int exprEnd;
                if (braceDepth == 0)
                {
                    exprEnd = scanIndex - 1;
                }
                else
                {
                    // If the loop finished without finding a match, the brace is unclosed.
                    ConstructAndThrowParserException("Unclosed expression in f-string.", _lexer.PeekCurrentToken());
                    return NilValue.NilInstance;
                }

                string expressionSource = fstringContent.Substring(exprStart + 1, exprEnd - exprStart - 1);
                Value expressionValue = ParseSubExpression(expressionSource);

                TempValue stringResult = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.ToString, stringResult, expressionValue));
                stringParts.Add(stringResult);

                lastIndex = exprEnd + 1;
            }

            if (stringParts.Count == 0)
            {
                return new StringValue("");
            }
            if (stringParts.Count == 1)
            {
                // If there's only one part, no concatenation is needed.
                return stringParts[0];
            }

            Value finalResult = stringParts[0];
            for (int i = 1; i < stringParts.Count; i++)
            {
                finalResult = ConcatenateStringValues(finalResult, stringParts[i]);
            }

            return finalResult;
        }

        /// <summary>
        /// A robust helper to parse a sub-expression from a string, using a temporary, isolated lexer.
        /// This safely handles parsing interpolated expressions inside f-strings.
        /// </summary>
        private Value ParseSubExpression(string source)
        {
            FluenceLexer savedLexer = _lexer;
            try
            {
                _lexer = new FluenceLexer(source);
                _lexer.LexFullSource();
                _lexer.RemoveLexerEOLS();
                return ResolveValue(ParseTernary());
            }
            catch (FluenceException)
            {
                throw;
            }
            finally
            {
                _lexer = savedLexer;
            }
        }

        /// <summary>
        /// Parses a list literal expression.
        /// </summary>
        /// <returns>A TempValue that will hold the new list instance at runtime.</returns>
        private TempValue ParseList()
        {
            // '[' is already consumed.

            TempValue list = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewList, list));

            if (!_lexer.TokenTypeMatches(TokenType.R_BRACKET))
            {
                List<Value> elements = ParseTokenSeparatedArguments(TokenType.COMMA);

                foreach (Value element in elements)
                {
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.PushElement, list, ResolveValue(element)));
                }
            }

            AdvanceAndExpect(TokenType.R_BRACKET, "Expected a closing ']' to end the list literal.");
            return list;
        }

        /// <summary>
        /// Parses a `use` statement, which imports symbols from one or more namespaces.
        /// into the current scop
        private void ParseUseStatement()
        {
            AdvanceAndExpect(TokenType.USE, "Expected the 'use' keyword.");

            do
            {
                Token nameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a namespace name after a 'use' statement.");
                string namespaceName = nameToken.Text;

                _intrinsicsManager.Use(namespaceName);

                if (!_currentParseState.NameSpaces.TryGetValue(namespaceName, out FluenceScope namespaceToUse))
                {
                    ConstructAndThrowParserException($"Namespace '{namespaceName}' not found. Expected a defined namespace.", nameToken);
                }

                foreach (KeyValuePair<string, Symbol> entry in namespaceToUse!.Symbols)
                {
                    if (!_currentParseState.CurrentScope.Declare(entry.Key, entry.Value) && !_currentParseState.CurrentScope.DeclaredSymbolNames.Contains(entry.Key))
                    {
                        ConstructAndThrowParserException($"Symbol '{entry.Key}' from namespace '{namespaceName}' conflicts with a symbol already defined in this scope.", nameToken);
                    }
                }
            }
            while (AdvanceTokenIfMatch(TokenType.COMMA));

            AdvanceAndExpect(TokenType.EOL, "Expected a ';' to end the 'use' statement.");
        }

        /// <summary>
        /// Parses a block of statements enclosed in curly braces `{ ... }`.
        /// </summary>
        private void ParseBlockStatement()
        {
            AdvanceAndExpect(TokenType.L_BRACE, "Expected an opening '{' to start a block of code.");
            while (!_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                ParseStatement();
            }
            AdvanceAndExpect(TokenType.R_BRACE, "Expected a closing '}' to end a block of code.");
        }

        /// <summary>
        /// Parses a block of statements enclosed in custom end and start tokens. An imitation of a block of code.
        /// </summary>
        private void ParseImitationBlockStatement(TokenType openToken, TokenType closeToken)
        {
            AdvanceAndExpect(openToken, $"Expected an opening '{openToken}' to start an imitation block of code.");
            while (!_lexer.TokenTypeMatches(closeToken))
            {
                ParseStatement();
            }
            AdvanceAndExpect(closeToken, $"Expected a closing '{closeToken}' to end an imitation block of code.");
        }

        /// <summary>
        /// Parses the assignment of a solid variable, the variable must be assigned to an explicit value.
        /// </summary>
        private void ParseSolidStatement()
        {
            _lexer.Advance(); // Consume 'solid'.

            Value left = ParseExpression();

            if (left is not VariableValue)
            {
                ConstructAndThrowParserException("Can not declare a constant value, or a non variable as solid.", _lexer.PeekCurrentToken());
            }

            VariableValue variable = (VariableValue)left;
            variable.IsReadOnly = true;

            AdvanceAndExpect(TokenType.EQUAL, "Expected an assignment for an immutable solid variable or field.");

            Value value = ParseExpression();

            GenerateWriteBackInstruction(variable, value);
        }

        /// <summary>
        /// Parses an assignment expression, which is the lowest level of precedence.
        /// This method acts as a dispatcher for all assignment-related syntax
        /// or handles a standalone expression used as a statement.
        /// </summary>
        private void ParseAssignment()
        {
            List<Value> lhsList = ParseLhs();
            Value firstLhs = lhsList[0];

            TokenType opType = _lexer.PeekNextTokenType();

            if ((IsSimpleAssignmentOperator(opType) || opType == TokenType.SWAP) && lhsList.Count > 1)
            {
                ConstructAndThrowParserException("Simple assignment operators (=, +=, ><) cannot be used with a multi-variable list.", _lexer.PeekNextToken());
            }

            // Multi-Assign operators like .+=, .-= and so on.
            if (IsMultiCompoundAssignmentOperator(opType))
            {
                ParseMultiCompoundAssignment(lhsList);
                return;
            }

            if (IsPipeCallAhead(out TokenType pipeType))
            {
                switch (pipeType)
                {
                    case TokenType.GUARD_PIPE:
                        ParseTruthyGuardChain(firstLhs);
                        break;
                    case TokenType.GUARD_CHAIN:
                    case TokenType.OR_GUARD_CHAIN:
                        ParseGuardChain(firstLhs);
                        break;
                }
                return;
            }

            if (IsChainAssignmentOperator(opType))
            {
                if (opType is TokenType.SEQUENTIAL_REST_ASSIGN or TokenType.OPTIONAL_SEQUENTIAL_REST_ASSIGN)
                {
                    ParseSequentialRestAssign(lhsList);
                    return;
                }
                else if (opType is TokenType.OPTIONAL_CHAIN_N_UNIQUE_ASSIGN or TokenType.CHAIN_N_UNIQUE_ASSIGN)
                {
                    ParseUniqueChainAssignment(lhsList);
                    return;
                }

                ParseChainAssignment(lhsList);
                return;
            }

            if (IsSimpleAssignmentOperator(opType) || opType == TokenType.SWAP)
            {
                TokenType type = _lexer.ConsumeToken().Type;
                Value rhs = ResolveValue(ParseTernary());

                if (type == TokenType.EQUAL)
                {
                    GenerateWriteBackInstruction(firstLhs, rhs);
                }
                else if (type == TokenType.SWAP)
                {
                    Value resolvedLhs = ResolveValue(firstLhs);
                    Value result = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, result, resolvedLhs));
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, resolvedLhs, rhs));
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, rhs, result));
                }
                else  // Compound, -=, +=, etc.
                {
                    Value resolvedLhs = ResolveValue(firstLhs);
                    InstructionCode opCode = GetInstructionCodeForBinaryOperator(type);

                    _currentParseState.AddCodeInstruction(new InstructionLine(opCode, resolvedLhs, resolvedLhs, rhs));

                    if (firstLhs is VariableValue variable)
                    {
                        _currentParseState.CurrentScope.Declare(variable.Name, new VariableSymbol(variable.Name, resolvedLhs));
                    }
                    else
                    {
                        GenerateWriteBackInstruction(firstLhs, resolvedLhs);
                    }
                }
            }
            else
            {
                // In Fluence the statement 'variable;' is valid, but it would be ignored.
                // We should generate bytecode regardless. That would return StatementCompleteValue.
                // It represents nothing so we just skip here.
                if (firstLhs is StatementCompleteValue or ElementAccessValue)
                {
                    // Either a StatementCompleteValue and we do nothing.
                    // Or some nonsense like:
                    // list[0]; Not a write, but reading is pointless. Do nothing.
                    return;
                }
                else if (firstLhs is VariableValue variable)
                {
                    // The expression was just a variable. Force a read.
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, variable, NilValue.NilInstance));
                }
            }
        }

        /// <summary>
        /// Parses a multi-target compound assignment expression, e.g., `a, b.x .+= 5, 9`.
        /// </summary>
        /// <param name="lhsDescriptors">The list of left-hand side targets to be modified.</param>
        private void ParseMultiCompoundAssignment(List<Value> lhsDescriptors)
        {
            Token opToken = _lexer.ConsumeToken();

            InstructionCode operation = GetInstructionCodeForMultiCompoundAssignment(opToken.Type);

            List<Value> rhsExpressions = ParseTokenSeparatedArguments(TokenType.COMMA);

            if (lhsDescriptors.Count != rhsExpressions.Count)
            {
                ConstructAndThrowParserException($"Mismatched number of items for multi-compound assignment '{opToken.ToDisplayString()}'.", opToken);
            }

            for (int i = 0; i < lhsDescriptors.Count; i++)
            {
                Value targetDescriptor = lhsDescriptors[i];
                Value rhsValue = ResolveValue(rhsExpressions[i]);
                Value lhsValue = ResolveValue(targetDescriptor);

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(operation, result, lhsValue, rhsValue));

                GenerateWriteBackInstruction(targetDescriptor, result);
            }
        }

        /// <summary>
        /// Parses the left-hand side of a potential assignment expression.
        /// </summary>
        /// <returns>A list of Value objects representing the parsed LHS.</returns>
        private List<Value> ParseLhs()
        {
            if (IsBroadCastPipeFunctionCall())
            {
                return [ParseBroadcastCallTemplate()];
            }

            return ParseTokenSeparatedArguments(TokenType.COMMA);
        }

        /// <summary>
        /// Checks if special pipe call operator is up ahead in the expression.
        /// </summary>
        /// <param name="pipeType">Returns the type of the pipe if true, else <see cref="TokenType.UNKNOWN"/>.</param>
        /// <returns>True if a special pipe operator is ahead.</returns>
        private bool IsPipeCallAhead(out TokenType pipeType)
        {
            int lookahead = 1;

            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookahead);

                if (type == TokenType.EOL)
                {
                    pipeType = TokenType.UNKNOWN;
                    return false;
                }

                if (type is TokenType.GUARD_PIPE or TokenType.GUARD_CHAIN or TokenType.OR_GUARD_CHAIN)
                {
                    pipeType = type;
                    return true;
                }

                if (type == TokenType.EOF)
                {
                    pipeType = TokenType.UNKNOWN;
                    return false;
                }
                lookahead++;
            }
        }

        /// <summary>
        /// Checks if a chain assignment operator is up ahead in the expression.
        /// </summary>
        /// <param name="pipeType">Returns the type of the pipe if true, else <see cref="TokenType.UNKNOWN"/>.</param>
        /// <returns>True if a special chain assignment operator is ahead.</returns>
        private bool IsChainAssignmentAhead(out TokenType pipeType)
        {
            int lookahead = 1;

            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookahead);

                if (type == TokenType.EOL)
                {
                    pipeType = TokenType.UNKNOWN;
                    return false;
                }

                if (type is >= TokenType.CHAIN_ASSIGN_N and <= TokenType.OPTIONAL_SEQUENTIAL_REST_ASSIGN)
                {
                    pipeType = type;
                    return true;
                }

                if (type == TokenType.EOF)
                {
                    pipeType = TokenType.UNKNOWN;
                    return false;
                }
                lookahead++;
            }
        }

        /// <summary>
        /// A helper method to parse a broadcast call template.
        /// </summary>
        /// <returns>A BroadcastCallTemplate object representing the parsed template.</returns>
        private BroadcastCallTemplate ParseBroadcastCallTemplate()
        {
            Value functionToCall;

            if (_lexer.PeekTokenTypeAheadByN(2) == TokenType.DOT)
            {
                string name = _lexer.ConsumeToken().Text;

                if (_currentParseState.CurrentScope.TryResolve(name, out Symbol symbol) && symbol is StructSymbol structSymbol)
                {
                    _lexer.Advance();
                    functionToCall = new StaticStructAccess(structSymbol, _lexer.ConsumeToken().Text);
                }
                else
                {
                    _lexer.Advance();
                    functionToCall = new PropertyAccessValue(new VariableValue(name), _lexer.ConsumeToken().Text);
                }
            }
            else
            {
                functionToCall = ParsePrimary();
            }

            Token openingParen = ConsumeAndExpect(TokenType.L_PAREN, "Expected an opening '(' for the broadcast call template.");

            List<Value> args = new List<Value>();
            int underscoreIndex = -1;

            do
            {
                if (_lexer.TokenTypeMatches(TokenType.UNDERSCORE))
                {
                    Token token = _lexer.ConsumeToken();
                    if (underscoreIndex != -1)
                    {
                        ConstructAndThrowParserException("Cannot use more than one `_` placeholder in a broadcast call.", token);
                    }
                    underscoreIndex = args.Count;
                    args.Add(NilValue.NilInstance);
                }
                else
                {
                    args.Add(ParseTernary());
                }
            }
            while (AdvanceTokenIfMatch(TokenType.COMMA));

            AdvanceAndExpect(TokenType.R_PAREN, "Expected a closing ')' for the broadcast call template.");

            // Semantic check: A broadcast template MUST contain a placeholder.
            if (underscoreIndex == -1)
            {
                ConstructAndThrowParserException("Broadcast call template must contain an `_` placeholder.", openingParen);
            }

            return new BroadcastCallTemplate(functionToCall!, args, underscoreIndex);
        }

        /// <summary>
        /// Parses a guard chain, or its or variant: <??| or <||??|.
        /// </summary>
        /// <param name="lhs">The variable on the left to which false or true is assigned.</param>
        private void ParseGuardChain(Value lhs)
        {
            Token pipe = _lexer.ConsumeToken();

            bool isOptional = pipe.Type == TokenType.OR_GUARD_CHAIN;

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, lhs, new BooleanValue(!isOptional)));

            List<Value> expressions = ParseTokenSeparatedArguments(TokenType.COMMA);
            List<int> boolyExitPatches = new List<int>(expressions.Count);

            for (int i = 0; i < expressions.Count; i++)
            {
                Value curr = expressions[i];

                TempValue temp = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, temp, curr, BooleanValue.True));
                _currentParseState.AddCodeInstruction(new InstructionLine(isOptional ? InstructionCode.GotoIfTrue : InstructionCode.GotoIfFalse, null!, temp));
                boolyExitPatches.Add(_currentParseState.CodeInstructions.Count - 1);
            }

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int breakIndex = _currentParseState.CodeInstructions.Count - 1;

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, lhs, new BooleanValue(isOptional)));
            int exitIndex = _currentParseState.CodeInstructions.Count - 1;

            for (int i = 0; i < boolyExitPatches.Count; i++)
            {
                _currentParseState.CodeInstructions[boolyExitPatches[i]].Lhs = new NumberValue(exitIndex);
            }

            _currentParseState.CodeInstructions[breakIndex].Lhs = new NumberValue(exitIndex + 1);
        }

        /// <summary>
        /// Parses a pipeline of |?? truthy expressions. Returns false if even one of the expressions is false.
        /// Otherwise assigns true.
        /// </summary>
        /// <param name="lhs">The variable on the left to which false or true is assigned.</param>
        private void ParseTruthyGuardChain(Value lhs)
        {
            _lexer.Advance(); // Consume first '|??'.

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, lhs, BooleanValue.True));

            List<Value> expressions = ParseTokenSeparatedArguments(TokenType.GUARD_PIPE);
            List<int> boolyExitPatches = new List<int>(expressions.Count);

            for (int i = 0; i < expressions.Count; i++)
            {
                Value curr = expressions[i];

                TempValue temp = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, temp, curr, BooleanValue.True));
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, temp));
                boolyExitPatches.Add(_currentParseState.CodeInstructions.Count - 1);
            }

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int breakIndex = _currentParseState.CodeInstructions.Count - 1;

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, lhs, BooleanValue.False));
            int exitIndex = _currentParseState.CodeInstructions.Count - 1;

            for (int i = 0; i < boolyExitPatches.Count; i++)
            {
                _currentParseState.CodeInstructions[boolyExitPatches[i]].Lhs = new NumberValue(exitIndex);
            }

            _currentParseState.CodeInstructions[breakIndex].Lhs = new NumberValue(exitIndex + 1);
        }

        /// <summary>
        /// Parses a sequential assignment expression, both optional and not.
        /// </summary>
        /// <param name="lhsDescriptors">A list of the left-hand side variables or descriptors to be assigned to.</param>
        private void ParseSequentialRestAssign(List<Value> lhsDescriptors)
        {
            int lhsIndex = 0;
            Token opToken = _lexer.ConsumeToken();
            bool isOptional = opToken.Type == TokenType.OPTIONAL_SEQUENTIAL_REST_ASSIGN;

            List<Value> rhsExpressions = ParseTokenSeparatedArguments(TokenType.COMMA);

            if (lhsDescriptors.Count != rhsExpressions.Count)
            {
                ConstructAndThrowParserException($"Mismatched number of items for sequential assignment '{opToken.ToDisplayString()}'.", opToken);
            }

            do
            {
                Value rhs = ResolveValue(rhsExpressions[lhsIndex]);

                int skipOptionalAssign = -1;
                if (isOptional)
                {
                    TempValue isNil = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, isNil, rhs, NilValue.NilInstance));
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, isNil));
                    skipOptionalAssign = _currentParseState.CodeInstructions.Count - 1;
                }

                GenerateWriteBackInstruction(lhsDescriptors[lhsIndex], rhs);
                lhsIndex++;
                if (skipOptionalAssign != -1)
                {
                    _currentParseState.CodeInstructions[skipOptionalAssign].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
                }
            }
            while (lhsIndex < lhsDescriptors.Count);
        }

        /// <summary>
        /// Parses a chain assignment expression.
        /// </summary>
        /// <param name="lhs">The already-parsed left-hand side, which determines the type of chain.</param>
        private void ParseChainAssignment(List<Value> lhs)
        {
            if (lhs.Count == 1 && lhs[0] is BroadcastCallTemplate broadcastCall)
            {
                ParseBroadCastCallChain(broadcastCall);
            }
            else
            {
                ParseStandardChainAssignment(lhs);
            }
        }

        /// <summary>
        /// Parses a chain assinment of values, but allows them to be unique for each variable.
        /// This means that the expression is evaluated N times.
        /// </summary>
        private void ParseUniqueChainAssignment(List<Value> lhsExpressions)
        {
            int lhsIndex = 0;

            while (IsChainAssignmentOperator(_lexer.PeekNextTokenType()))
            {
                if (lhsIndex >= lhsExpressions.Count)
                {
                    // All variables have been assigned, but there are more operators.
                    ConstructAndThrowParserException("Redundant chain assignment operator. No more variables are available for assignment.", _lexer.PeekNextToken());
                }

                Token op = _lexer.ConsumeToken();

                bool isOptional = IsOptionalChainAssignmentOperator(op.Type);
                List<int> optionalSkipIndexes = new List<int>();

                if (op.Type is TokenType.OPTIONAL_CHAIN_N_UNIQUE_ASSIGN or TokenType.CHAIN_N_UNIQUE_ASSIGN)
                {
                    int count = Convert.ToInt32(op.Literal);

                    int start = _currentParseState.CodeInstructions.Count;
                    Value rhs = ParseTernary();
                    int end = _currentParseState.CodeInstructions.Count;
                    bool ignoreFirstCopy = true;

                    for (int i = 0; i < count; i++)
                    {
                        if (!ignoreFirstCopy)
                        {
                            _currentParseState.CodeInstructions.AddRange(_currentParseState.CodeInstructions[start..end]);
                        }
                        ignoreFirstCopy = false;

                        TempValue valueToAssign = new TempValue(_currentParseState.NextTempNumber);

                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, valueToAssign, rhs));

                        if (isOptional)
                        {
                            TempValue isNil = new TempValue(_currentParseState.NextTempNumber + 1);
                            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, isNil, valueToAssign, NilValue.NilInstance));
                            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, isNil));
                            optionalSkipIndexes.Add(_currentParseState.CodeInstructions.Count - 1);
                        }

                        if (lhsIndex >= lhsExpressions.Count)
                        {
                            ConstructAndThrowParserException($"Chain operator '{op.ToDisplayString()}' expected {count} variables, but only {i} were available. There are more variables on the left-hand side.", op);
                        }

                        GenerateWriteBackInstruction(lhsExpressions[lhsIndex], valueToAssign);
                        lhsIndex++;
                    }

                    if (optionalSkipIndexes.Count != 0)
                    {
                        for (int i = 0; i < optionalSkipIndexes.Count; i++)
                        {
                            _currentParseState.CodeInstructions[optionalSkipIndexes[i]].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
                        }
                        optionalSkipIndexes.Clear();
                    }
                }
                else
                {
                    while (lhsIndex < lhsExpressions.Count)
                    {
                        GenerateWriteBackInstruction(lhsExpressions[lhsIndex], ParseTernary());
                        lhsIndex++;
                    }
                }
            }
        }

        /// <summary>
        /// Parses a standard chain assignment.
        /// </summary>
        private void ParseStandardChainAssignment(List<Value> lhsExpressions)
        {
            int lhsIndex = 0;
            while (IsChainAssignmentOperator(_lexer.PeekNextTokenType()))
            {
                if (lhsIndex >= lhsExpressions.Count)
                {
                    // All variables have been assigned, but there are more operators.
                    ConstructAndThrowParserException("Redundant chain assignment operator. No more variables are available for assignment.", _lexer.PeekNextToken());
                }

                Token op = _lexer.ConsumeToken();

                bool isOptional = IsOptionalChainAssignmentOperator(op.Type);

                Value rhs = ParseTernary();

                TempValue valueToAssign = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, valueToAssign, rhs));

                int skipOptionalAssign = -1;
                if (isOptional)
                {
                    TempValue isNil = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, isNil, valueToAssign, NilValue.NilInstance));
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, isNil));
                    skipOptionalAssign = _currentParseState.CodeInstructions.Count - 1;
                }

                if (op.Type is TokenType.CHAIN_ASSIGN_N or TokenType.OPTIONAL_ASSIGN_N)
                {
                    int count = Convert.ToInt32(op.Literal);
                    for (int i = 0; i < count; i++)
                    {
                        if (lhsIndex >= lhsExpressions.Count)
                        {
                            ConstructAndThrowParserException($"Chain operator '{op.ToDisplayString()}' expected {count} variables, but only {i} were available. There are more variables on the left-hand side.", op);
                        }
                        GenerateWriteBackInstruction(lhsExpressions[lhsIndex], valueToAssign);
                        lhsIndex++;
                    }
                }
                else
                {
                    while (lhsIndex < lhsExpressions.Count)
                    {
                        GenerateWriteBackInstruction(lhsExpressions[lhsIndex], valueToAssign);
                        lhsIndex++;
                    }
                }

                if (skipOptionalAssign != -1)
                {
                    _currentParseState.CodeInstructions[skipOptionalAssign].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
                }
            }
        }

        /// <summary>
        /// Helper to parse a broadcast call chain.
        /// </summary>
        private void ParseBroadCastCallChain(BroadcastCallTemplate broadcastCall)
        {
            // Although weird, there are cases when you could pipe multiple broadcast calls.
            while (IsChainAssignmentOperator(_lexer.PeekNextTokenType()))
            {
                Token op = _lexer.ConsumeToken(); // Consume '<|' or '<?|'.

                if (op.Type is not TokenType.REST_ASSIGN and not TokenType.OPTIONAL_REST_ASSIGN)
                {
                    ConstructAndThrowParserException("Invalid operator for broadcast call. Expected '<|' or '<?|'.", op);
                    return;
                }

                bool isOptional = op.Type == TokenType.OPTIONAL_REST_ASSIGN;

                List<Value> rhsExpressions = ParseTokenSeparatedArguments(TokenType.COMMA);

                if (rhsExpressions.Count == 0)
                {
                    ConstructAndThrowParserException("Broadcast call expects at least one value on the right-hand side. Expected one or more comma-separated values.", op);
                    return;
                }

                foreach (Value rhsValue in rhsExpressions)
                {
                    Value resolvedRhs = ResolveValue(rhsValue);

                    int skipOptionalAssign = -1;
                    if (isOptional)
                    {
                        TempValue isNil = new TempValue(_currentParseState.NextTempNumber++);
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Equal, isNil, resolvedRhs, NilValue.NilInstance));
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, isNil));
                        skipOptionalAssign = _currentParseState.CodeInstructions.Count - 1;
                    }

                    broadcastCall.Arguments[broadcastCall.PlaceholderIndex] = resolvedRhs;

                    foreach (Value item in broadcastCall.Arguments)
                    {
                        _currentParseState.AddCodeInstruction(new InstructionLine(item is ReferenceValue ? InstructionCode.LoadAddress : InstructionCode.PushParam, item));
                    }

                    TempValue temp = new TempValue(_currentParseState.NextTempNumber++);

                    if (broadcastCall.Callable is StaticStructAccess statAccess)
                    {
                        _currentParseState.AddCodeInstruction(new InstructionLine(
                            InstructionCode.CallStatic,
                            temp,
                            statAccess.Struct,
                            new StringValue(Mangler.Mangle(statAccess.Name, broadcastCall.Arguments.Count))
                        ));
                    }
                    else if (broadcastCall.Callable is PropertyAccessValue propAccess)
                    {
                        _currentParseState.AddCodeInstruction(new InstructionLine(
                            InstructionCode.CallMethod,
                            temp,
                            propAccess.Target,
                            new StringValue(Mangler.Mangle(propAccess.FieldName, broadcastCall.Arguments.Count))
                        ));
                    }
                    else
                    {
                        VariableValue var = (VariableValue)broadcastCall.Callable;
                        VariableValue mangle = new VariableValue(Mangler.Mangle(var.Name, broadcastCall.Arguments.Count));
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.CallFunction, temp, mangle, new NumberValue(broadcastCall.Arguments.Count)));
                    }

                    if (skipOptionalAssign != -1)
                    {
                        _currentParseState.CodeInstructions[skipOptionalAssign].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);
                    }
                }
            }
        }

        /// <summary>
        /// Parses a ternary expression or a Fluence-style joint ternary.
        /// </summary>
        private Value ParseTernary()
        {
            // If Ternary, this becomes the condition.
            Value left = ParsePipe();

            TokenType type = _lexer.PeekNextTokenType();

            if (type is not TokenType.QUESTION and not TokenType.TERNARY_JOINT)
            {
                return left;
            }

            // Two formats, normal: cond ? a : b
            // Joint: cond ?: a, b

            _lexer.Advance(); // Consume '?' or '?:'

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfFalse, null!, left));
            int falseJumpPatch = _currentParseState.CodeInstructions.Count - 1;

            Value trueExpr = ResolveValue(ParseTernary());

            TempValue result = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, result, trueExpr));

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int endJumpPatch = _currentParseState.CodeInstructions.Count - 1;

            int falsePathAddress = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[falseJumpPatch].Lhs = new NumberValue(falsePathAddress);

            // Consume the ':' or ',' delimiter.
            if (type == TokenType.QUESTION)
            {
                AdvanceAndExpect(TokenType.COLON, "Expected a ':' in the ternary expression.");
            }
            else
            {
                AdvanceAndExpect(TokenType.COMMA, "Expected ',' in a Fluid-style ternary expression.");
            }

            Value falseExpr = ResolveValue(ParseTernary());
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, result, falseExpr));

            int endAddress = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[endJumpPatch].Lhs = new NumberValue(endAddress);

            // The "value" of this entire ternary expression for the rest of the parser
            // is the temporary variable that holds the chosen result.
            return result;
        }

        /// <summary>
        /// Dispatches the parsing of '|>' operator or a chain of it.
        /// </summary>
        private Value ParsePipe()
        {
            Value left = ParseExpression();

            // While we see a pipe, parse it and try again.
            bool first = true;
            while (_lexer.PeekNextTokenType() == TokenType.PIPE)
            {
                left = ParsePipe(left, first);
                first = false;
            }

            return left;
        }

        /// <summary>
        /// Parses a chain of '|>' pipe operators.
        /// </summary>
        private Value ParsePipe(Value left, bool first)
        {
            while (true)
            {
                TokenType pipeType = _lexer.PeekNextTokenType();

                if (pipeType == TokenType.PIPE)
                {
                    if (_lexer.PeekTokenTypeAheadByN(2) == TokenType.DOT)
                    {
                        _lexer.AdvanceMany(2); // Consume '|>' and '.'
                        // This is a method pipe call, like `|>.append()`
                        left = ParseMethodPipeCall(left);
                    }
                    else
                    {
                        // This is a standard pipe call, like `|> printl()`
                        _lexer.Advance(); // Consume `|>`.
                        left = ParseStandardPipeCall(left, first);
                    }
                }
                else
                {
                    // No more pipe operators, the chain is finished.
                    break;
                }
            }

            return left;
        }

        /// <summary>
        /// Parses a '|>>=' reducer pipe
        /// </summary>
        /// <param name="collection">The collection to reduce.</param>
        /// <returns>The reduced result.</returns>
        private TempValue ParseReducerPipe(Value collection)
        {
            _lexer.Advance(); // Consume '|>>='.
            AdvanceAndExpect(TokenType.L_PAREN, "Expected an opening '(' for Reducer Pipe arguments.");

            Value initialValue = ResolveValue(ParseExpression());
            AdvanceAndExpect(TokenType.COMMA, "Expected a comma between initial value and lambda in Reducer Pipe.");
            AdvanceAndExpect(TokenType.L_PAREN, "Expected an opening '(' for Reducer Pipe lambda.");

            LambdaValue lambda = ParseLambda();

            // Block body lambda.
            if (_lexer.PeekNextTokenType() == TokenType.EOL)
            {
                _lexer.Advance();
            }
            if (lambda.Function.Arity != 2)
            {
                ConstructAndThrowParserException($"Reducer pipe lambda must take exactly 2 arguments (accumulator, element), but got {lambda.Function.Arity}.", _lexer.PeekNextToken());
            }

            AdvanceAndExpect(TokenType.R_PAREN, "Expected a closing ')' for Reducer Pipe arguments.");

            TempValue accumulatorRegister = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, accumulatorRegister, initialValue));

            TempValue iteratorRegister = new TempValue(_currentParseState.NextTempNumber++);
            TempValue elementRegister = new TempValue(_currentParseState.NextTempNumber++);
            TempValue continueFlagRegister = new TempValue(_currentParseState.NextTempNumber++);

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewIterator, iteratorRegister, collection));
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));
            int gotoEndIndex = _currentParseState.CodeInstructions.Count - 1;

            int loopBodyStartIndex = _currentParseState.CodeInstructions.Count;
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.PushTwoParams, accumulatorRegister, elementRegister));
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.CallFunction, accumulatorRegister, lambda, new NumberValue(2)));

            int conditionStartIndex = _currentParseState.CodeInstructions.Count;
            _currentParseState.CodeInstructions[gotoEndIndex].Lhs = new NumberValue(conditionStartIndex);

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.IterNext, iteratorRegister, elementRegister, continueFlagRegister));
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, new NumberValue(loopBodyStartIndex), continueFlagRegister));

            return accumulatorRegister;
        }

        /// <summary>
        /// Parses a method call on the right-hand side of a method pipe `|>.`.
        /// Assumes the `|>` and `.` tokens have already been consumed.
        /// </summary>
        /// <param name="pipedObject">The result of the previous expression (the object to call the method on).</param>
        private TempValue ParseMethodPipeCall(Value pipedObject)
        {
            Token methodNameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a method name after '|>.'");
            string methodName = methodNameToken.Text;

            AdvanceAndExpect(TokenType.L_PAREN, "Expected '(' to begin method arguments.");
            List<Value> arguments = ParseArgumentList();
            AdvanceAndExpect(TokenType.R_PAREN, "Expected ')' to close method arguments.");

            foreach (Value arg in arguments)
            {
                _currentParseState.AddCodeInstruction(new InstructionLine(arg is ReferenceValue ? InstructionCode.LoadAddress : InstructionCode.PushParam, ResolveValue(arg)));
            }

            TempValue result = new TempValue(_currentParseState.NextTempNumber++);
            string mangledMethodName = Mangler.Mangle(methodName, arguments.Count);

            _currentParseState.AddCodeInstruction(new InstructionLine(
                InstructionCode.CallMethod,
                result,
                pipedObject,
                new StringValue(mangledMethodName)
            ));

            return result;
        }

        /// <summary>
        /// Parses the right-hand side of a pipe expression, which must be a function call.
        /// It finds the `_` placeholder and injects the piped value.
        /// </summary>
        /// <param name="leftSidePipedValue">The value from the left-hand side of the pipe.</param>
        private TempValue ParseStandardPipeCall(Value leftSidePipedValue, bool firstArg)
        {
            Value targetFunction = ParsePrimary();
            AdvanceAndExpect(TokenType.L_PAREN, "Expected a function call with `(` after a pipe `|>` operator.");

            List<Value> args = new List<Value>();
            bool foundUnderscore = false;

            while (AdvanceTokenIfMatch(TokenType.COMMA) || !_lexer.TokenTypeMatches(TokenType.R_PAREN))
            {
                if (_lexer.TokenTypeMatches(TokenType.UNDERSCORE))
                {
                    foundUnderscore = true;
                    _lexer.Advance();
                    args.Add(leftSidePipedValue);
                }
                else
                {
                    args.Add(ParsePipe());
                }
            }

            if (!foundUnderscore && !firstArg)
            {
                ConstructAndThrowParserException("Only the first expression in a pipe call is allowed to not have the '_' argument, the rest must have it.", _lexer.PeekNextToken());
            }

            AdvanceAndExpect(TokenType.R_PAREN, "Expected a closing ')' for the function call in a pipe.");

            foreach (Value arg in args)
            {
                _currentParseState.AddCodeInstruction(new InstructionLine(arg is ReferenceValue ? InstructionCode.LoadAddress : InstructionCode.PushParam, arg));
            }

            TempValue result = new TempValue(_currentParseState.NextTempNumber++);
            VariableValue var = (VariableValue)targetFunction;
            VariableValue mangle = new VariableValue(Mangler.Mangle(var.Name, args.Count));
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.CallFunction, result, mangle, new NumberValue(args.Count)));

            return result;
        }

        /// <summary>
        /// Converts a binary operator TokenType into its corresponding InstructionCode.
        /// Handles arithmetic, comparison, logical, and bitwise operators.
        /// </summary>
        /// <param name="type">The TokenType of the binary operator.</param>
        /// <returns>The corresponding InstructionCode.</returns>
        private static InstructionCode GetInstructionCodeForBinaryOperator(TokenType type) => type switch
        {
            // Arithmetic.
            TokenType.PLUS => InstructionCode.Add,
            TokenType.MINUS => InstructionCode.Subtract,
            TokenType.STAR => InstructionCode.Multiply,
            TokenType.SLASH => InstructionCode.Divide,
            TokenType.PERCENT => InstructionCode.Modulo,
            TokenType.EXPONENT => InstructionCode.Power,

            TokenType.EQUAL_EQUAL => InstructionCode.Equal,
            TokenType.BANG_EQUAL => InstructionCode.NotEqual,
            TokenType.GREATER => InstructionCode.GreaterThan,
            TokenType.LESS => InstructionCode.LessThan,
            TokenType.GREATER_EQUAL => InstructionCode.GreaterEqual,
            TokenType.LESS_EQUAL => InstructionCode.LessEqual,

            TokenType.EQUAL_PLUS => InstructionCode.Add,
            TokenType.EQUAL_MINUS => InstructionCode.Subtract,
            TokenType.EQUAL_DIV => InstructionCode.Divide,
            TokenType.EQUAL_MUL => InstructionCode.Multiply,
            TokenType.EQUAL_AMPERSAND => InstructionCode.BitwiseAnd,
            TokenType.EQUAL_PERCENT => InstructionCode.Modulo,

            TokenType.AND => InstructionCode.And,
            TokenType.OR => InstructionCode.Or,

            // Bitwise.
            TokenType.BITWISE_LEFT_SHIFT => InstructionCode.BitwiseLShift,
            TokenType.BITWISE_RIGHT_SHIFT => InstructionCode.BitwiseRShift,
            TokenType.CARET => InstructionCode.BitwiseXor,
            TokenType.PIPE_CHAR => InstructionCode.BitwiseOr,
            TokenType.AMPERSAND => InstructionCode.BitwiseAnd,

            _ => throw new ArgumentException($"Token type '{type}' is not a recognized binary operator.", nameof(type))
        };

        /// <summary>
        /// The main entry point for parsing any expression.
        /// It begins the chain of precedence by calling <see cref="ParseLogicalOr"/>.
        /// </summary>
        private Value ParseExpression() => ParseReducerPipe();

        /// <summary>
        /// Parses a reducer pipe '|>>=' if there is one.
        /// </summary>
        private Value ParseReducerPipe()
        {
            Value left = ParseLogicalOr();

            while (_lexer.TokenTypeMatches(TokenType.REDUCER_PIPE))
            {
                left = ParseReducerPipe(ResolveValue(left));
            }

            return left;
        }

        /// <summary>
        /// Parses logical OR expressions '||'.
        /// </summary>
        private Value ParseLogicalOr()
        {
            Value left = ParseLogicalAnd();

            while (_lexer.TokenTypeMatches(TokenType.OR))
            {
                _lexer.Advance();
                Value right = ParseLogicalAnd();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Or, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses logical AND expressions (&&).
        /// </summary>
        private Value ParseLogicalAnd()
        {
            Value left = ParseBitwiseOr();

            while (_lexer.TokenTypeMatches(TokenType.AND))
            {
                _lexer.Advance();
                Value right = ParseBitwiseOr();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.And, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses bitwise OR expressions (|).
        /// </summary>
        private Value ParseBitwiseOr()
        {
            Value left = ParseBitwiseXor();

            // | is called PIPE_CHAR.
            while (_lexer.TokenTypeMatches(TokenType.PIPE_CHAR))
            {
                _lexer.Advance();
                Value right = ParseBitwiseXor();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.BitwiseOr, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses bitwise XOR expressions (^).
        /// </summary>
        private Value ParseBitwiseXor()
        {
            Value left = ParseBitwiseAnd();

            while (_lexer.TokenTypeMatches(TokenType.CARET))
            {
                _lexer.Advance();
                Value right = ParseBitwiseAnd();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.BitwiseXor, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses bitwise AND expressions (&).
        /// </summary>
        private Value ParseBitwiseAnd()
        {
            Value left = ParseEquality();

            while (_lexer.TokenTypeMatches(TokenType.AMPERSAND))
            {
                _lexer.Advance();
                Value right = ParseBitwiseAnd();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.BitwiseAnd, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses equality expressions.
        /// </summary>
        private Value ParseEquality()
        {
            Value left = ParseBitwiseShift();

            while (_lexer.TokenTypeMatches(TokenType.EQUAL_EQUAL) || _lexer.TokenTypeMatches(TokenType.BANG_EQUAL))
            {
                Token op = _lexer.ConsumeToken();
                Value right = ParseBitwiseShift();

                Value result = new TempValue(_currentParseState.NextTempNumber++);
                InstructionCode opcode = (op.Type == TokenType.EQUAL_EQUAL)
                    ? InstructionCode.Equal
                    : InstructionCode.NotEqual;

                _currentParseState.AddCodeInstruction(new InstructionLine(opcode, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses bitwise shift expressions (<<, >>).
        /// </summary>
        private Value ParseBitwiseShift()
        {
            Value left = ParseComparison();

            while (_lexer.TokenTypeMatches(TokenType.BITWISE_LEFT_SHIFT) || _lexer.TokenTypeMatches(TokenType.BITWISE_RIGHT_SHIFT))
            {
                Token op = _lexer.ConsumeToken();
                Value right = ParseComparison();

                Value result = new TempValue(_currentParseState.NextTempNumber++);
                InstructionCode opcode = (op.Type == TokenType.BITWISE_LEFT_SHIFT)
                    ? InstructionCode.BitwiseLShift
                    : InstructionCode.BitwiseRShift;

                _currentParseState.AddCodeInstruction(new InstructionLine(opcode, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses comparison expressions. This is a complex precedence level that handles three forms of syntax:
        /// 1. Dot-prefixed logical operators (`.and(...)`, `.or(...)`).
        /// 2. Collective comparisons.
        /// 3. Standard binary comparisons.
        /// </summary>
        private Value ParseComparison()
        {
            TokenType opType = _lexer.PeekNextTokenType();

            // The .and()/.or() syntax must be checked first, as it doesn't follow the infix `left op right` pattern.
            if (opType is TokenType.DOT_AND_CHECK or TokenType.DOT_OR_CHECK)
            {
                return ParseDotAndOrOperators();
            }

            Value left = ParseRange();

            // Potential collective comparison.
            if (_lexer.TokenTypeMatches(TokenType.COMMA) && IsCollectiveComparisonAhead())
            {
                List<Value> args = new List<Value>() { left };
                _lexer.Advance();

                do
                {
                    args.Add(ParseRange());
                } while (AdvanceTokenIfMatch(TokenType.COMMA) && IsNotAStandardComparison(_lexer.PeekNextTokenType()));

                return GenerateCollectiveComparisonByteCode(args, _lexer.ConsumeToken(), ParseRange());
            }

            while (IsStandardComparisonOperator(_lexer.PeekNextTokenType()))
            {
                Token op = _lexer.ConsumeToken();
                Value right = ParseRange();

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(GetInstructionCodeForBinaryOperator(op.Type), result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses a short-circuiting logical check using `.and(...)` or `.or(...)` syntax.
        /// </summary>
        /// <returns>A TempValue that will hold the final boolean result at runtime.</returns>
        private Value ParseDotAndOrOperators()
        {
            Token opToken = _lexer.ConsumeToken(); // Consume '.and' or '.or'.

            AdvanceAndExpect(TokenType.L_PAREN, $"Expected an opening '(' after '{opToken.ToDisplayString()}'.");

            InstructionCode logicalOp = opToken.Type == TokenType.DOT_AND_CHECK ? InstructionCode.And : InstructionCode.Or;

            // Empty call case.
            if (_lexer.TokenTypeMatches(TokenType.R_PAREN))
            {
                ConstructAndThrowParserException("Argument list for .and()/.or() cannot be empty. Expected at least one boolean expression.", opToken);
            }

            Value result = ResolveValue(ParseExpression());

            while (AdvanceTokenIfMatch(TokenType.COMMA))
            {
                Value nextCondition = ResolveValue(ParseExpression());

                TempValue combinedResult = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(logicalOp, combinedResult, result, nextCondition));

                result = combinedResult;
            }

            AdvanceAndExpect(TokenType.R_PAREN, $"Expected a closing ')' after '{opToken.ToDisplayString()}' arguments.");

            return result;
        }

        /// <summary>
        /// Generates the bytecode for a collective comparison expression.
        /// </summary>
        /// <param name="lhsExprs">The list of left-hand side expressions to compare.</param>
        /// <param name="opToken">The collective comparison operator token.</param>
        /// <param name="rhs">The single right-hand side expression to compare against.</param>
        /// <returns>A TempValue that will hold the final boolean result at runtime.</returns>
        private TempValue GenerateCollectiveComparisonByteCode(List<Value> lhsExprs, Token opToken, Value rhs)
        {
            Value resolvedRhs = ResolveValue(rhs);

            InstructionCode comparisonOp = GetInstructionCodeForCollectiveOp(opToken.Type);
            InstructionCode logicalOp = IsOrCollectiveOperator(opToken.Type) ? InstructionCode.Or : InstructionCode.And;

            TempValue finalResult = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(
                comparisonOp,
                finalResult,
                ResolveValue(lhsExprs[0]),
                resolvedRhs
            ));

            for (int i = 1; i < lhsExprs.Count; i++)
            {
                TempValue nextComparisonResult = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    comparisonOp,
                    nextComparisonResult,
                    ResolveValue(lhsExprs[i]),
                    resolvedRhs
                ));

                // Combine this result with the running total.
                TempValue combinedResult = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    logicalOp,
                    combinedResult,
                    finalResult,
                    nextComparisonResult
                ));

                finalResult = combinedResult;
            }

            return finalResult;
        }

        /// <summary>
        /// Parses range expressions.
        /// This has higher precedence than comparison but lower than addition.
        /// </summary>
        private Value ParseRange()
        {
            Value left = ParseAdditionSubtraction();

            if (_lexer.TokenTypeMatches(TokenType.DOT_DOT))
            {
                _lexer.Advance(); // Consume the '..'.
                // The end of the range.
                Value right = ParseAdditionSubtraction();

                RangeValue range = new RangeValue(ResolveValue(left), ResolveValue(right));
                return range;
            }

            return left;
        }

        /// <summary>
        /// Parses Addition & Subtraction expressions (+, -).
        /// </summary>
        private Value ParseAdditionSubtraction()
        {
            Value left = ParseMulDivModulo();

            while (_lexer.TokenTypeMatches(TokenType.PLUS) || _lexer.TokenTypeMatches(TokenType.MINUS))
            {
                Token op = _lexer.ConsumeToken();
                Value right = ParseMulDivModulo();

                Value result = new TempValue(_currentParseState.NextTempNumber++);
                InstructionCode opcode = (op.Type == TokenType.PLUS)
                    ? InstructionCode.Add
                    : InstructionCode.Subtract;

                _currentParseState.AddCodeInstruction(new InstructionLine(opcode, result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses Multiplication, Division, and Modulo expressions (*, /, %).
        /// </summary>
        private Value ParseMulDivModulo()
        {
            Value left = ParseExponentiation();

            while (IsMultiplicativeOperator(_lexer.PeekNextTokenType()))
            {
                Token op = _lexer.ConsumeToken();
                Value right = ParseExponentiation();

                Value result = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(GetInstructionCodeForBinaryOperator(op.Type), result, ResolveValue(left), ResolveValue(right)));

                left = result;
            }

            return left;
        }

        /// <summary>
        /// Parses exponentiation expressions (**), which are right-associative.
        /// This is the highest precedence binary operator.
        /// </summary>
        private Value ParseExponentiation()
        {
            Value left = ParseUnary();

            while (_lexer.TokenTypeMatches(TokenType.EXPONENT))
            {
                _lexer.Advance();
                Value right = ParseExponentiation();

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.Power,
                    result,
                    ResolveValue(left),
                    ResolveValue(right)
                ));
                return result;
            }

            return left;
        }

        /// <summary>
        /// Parses prefix unary operators (!, -, ~). These are right-associative.
        /// </summary>
        private Value ParseUnary()
        {
            TokenType type = _lexer.PeekNextTokenType();
            if (type is TokenType.BANG or TokenType.MINUS or TokenType.TILDE)
            {
                Token op = _lexer.ConsumeToken();

                Value operand = ResolveValue(ParseExpression());

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);

                InstructionCode opcode = op.Type switch
                {
                    TokenType.BANG => InstructionCode.Not,
                    TokenType.MINUS => InstructionCode.Negate,
                    TokenType.TILDE => InstructionCode.BitwiseNot,
                };

                _currentParseState.AddCodeInstruction(new InstructionLine(opcode, result, operand));

                return result;
            }

            return ParsePostFix();
        }

        /// <summary>
        /// Parses postfix operators (++, --, !!) and multi-increment/decrement expressions (.++, .--).
        /// Chained postfix operators are not valid in Fluence, such as !!!!, ++++, ----, or ++--, --++ and so on.
        /// </summary>
        private Value ParsePostFix()
        {
            TokenType type = _lexer.PeekNextTokenType();
            if (type is TokenType.DOT_DECREMENT or TokenType.DOT_INCREMENT)
            {
                ParseMultiIncrementDecrementOperators();
                // This operation does not return a value.
                return StatementCompleteValue.StatementCompleted;
            }

            Value left = ParseAccess();

            type = _lexer.PeekNextTokenType();
            if (type is TokenType.INCREMENT or TokenType.DECREMENT or TokenType.BOOLEAN_FLIP)
            {
                Token op = _lexer.ConsumeToken();
                Value originalValue = ResolveValue(left);

                Value modifiedValue;

                if (op.Type == TokenType.BOOLEAN_FLIP)
                {
                    TempValue flippedValue = new TempValue(_currentParseState.NextTempNumber++);
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Not, flippedValue, originalValue));
                    modifiedValue = flippedValue;
                }
                else // ++ and --.
                {
                    InstructionCode operation = (op.Type == TokenType.INCREMENT) ? InstructionCode.Add : InstructionCode.Subtract;

                    _currentParseState.AddCodeInstruction(new InstructionLine(operation, originalValue, originalValue, NumberValue.One));
                    modifiedValue = originalValue;
                }

                if (modifiedValue is not VariableValue)
                {
                    GenerateWriteBackInstruction(left, modifiedValue);
                    return modifiedValue;
                }

                return StatementCompleteValue.StatementCompleted;
            }

            return left;
        }

        /// <summary>
        /// Parses a multi-target increment or decrement operation.
        /// </summary>
        private void ParseMultiIncrementDecrementOperators()
        {
            Token opToken = _lexer.ConsumeToken(); // Consume '.++' or '.--'.

            AdvanceAndExpect(TokenType.L_PAREN, $"Expected an opening '(' after the '{opToken.ToDisplayString()}' operator.");

            InstructionCode operation = (opToken.Type == TokenType.DOT_DECREMENT)
                ? InstructionCode.Subtract
                : InstructionCode.Add;

            do
            {
                Value targetDescriptor = ParseExpression();
                Value currentValue = ResolveValue(targetDescriptor);

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(operation, result, currentValue, NumberValue.One));

                GenerateWriteBackInstruction(targetDescriptor, result);
            }
            while (AdvanceTokenIfMatch(TokenType.COMMA));

            AdvanceAndExpect(TokenType.R_PAREN, $"a closing ')' after the '{opToken.ToDisplayString()}' operator's arguments.");
        }

        /// <summary>
        /// A helper method that generates the correct instruction (Assign, SetField, or SetElement)
        /// to write a value back to the location described by a descriptor.
        /// </summary>
        /// <param name="descriptor">The original Value, which may be a simple VariableValue or a complex descriptor like PropertyAccessValue.</param>
        /// <param name="valueToAssign">The Value (usually a TempValue) that holds the result to be written.</param>
        private void GenerateWriteBackInstruction(Value descriptor, Value valueToAssign)
        {
            switch (descriptor)
            {
                case VariableValue variable:
                    _currentParseState.CurrentScope.Declare(variable.Name, new VariableSymbol(variable.Name, valueToAssign, variable.IsReadOnly));

                    if (valueToAssign is LambdaValue)
                    {
                        _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewLambda, variable, valueToAssign));
                        return;
                    }

                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, variable, valueToAssign));
                    break;
                case PropertyAccessValue propAccess:
                    Value targetObject = ResolveValue(propAccess.Target);
                    _currentParseState.AddCodeInstruction(new InstructionLine(
                        InstructionCode.SetField,
                        targetObject,
                        new StringValue(propAccess.FieldName),
                        valueToAssign
                    ));
                    break;
                case ElementAccessValue elementAccess:
                    Value targetCollection = ResolveValue(elementAccess.Target);
                    Value index = ResolveValue(elementAccess.Index);
                    _currentParseState.AddCodeInstruction(new InstructionLine(
                        InstructionCode.SetElement,
                        targetCollection,
                        index,
                        valueToAssign
                    ));
                    break;
                case StaticStructAccess statAccess:
                    if (statAccess.Struct.StaticFields.ContainsKey(statAccess.Name))
                    {
                        ConstructAndThrowParserException($"Attempted to modify a solid ( static ) struct field: {statAccess.Struct}__Field:{statAccess.Name}.", _lexer.PeekNextToken());
                        return;
                    }
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// Ensures that a given Value is a simple, usable value
        /// rather than an abstract descriptor. If the input Value is a descriptor (like PropertyAccessValue
        /// or ElementAccessValue), this method generates the necessary GetField or GetElement bytecode
        /// to retrieve the actual value and returns the TempValue that will hold the result at runtime.
        /// </summary>
        /// <param name="val">The Value to resolve.</param>
        /// <returns>A simple Value that can be used as an operand in other instructions.</returns>
        private Value ResolveValue(Value val)
        {
            if (val is not (PropertyAccessValue or ElementAccessValue or StaticStructAccess))
            {
                return val;
            }

            if (val is StaticStructAccess statAccess)
            {
                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.GetStatic,
                    result,
                    statAccess.Struct,
                    new StringValue(statAccess.Name)
                ));

                return result;
            }

            if (val is PropertyAccessValue propAccess)
            {
                Value resolvedTarget = ResolveValue(propAccess.Target);

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.GetField,
                    result,
                    resolvedTarget,
                    new StringValue(propAccess.FieldName)
                ));

                return result;
            }

            if (val is ElementAccessValue elementAccess)
            {
                Value resolvedCollection = ResolveValue(elementAccess.Target);
                Value resolvedIndex = ResolveValue(elementAccess.Index);

                TempValue result = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.GetElement,
                    result,
                    resolvedCollection,
                    resolvedIndex
                ));

                return result;
            }

            // This should be unreachable, but it satisfies the compiler.
            return val;
        }

        /// <summary>
        /// Parses a constructor call via parentheses.
        /// </summary>
        /// <param name="structSymbol">The symbol for the struct being instantiated.</param>
        /// <returns>A TempValue that will hold the new struct instance at runtime.</returns>
        private TempValue ParseConstructorCall(StructSymbol structSymbol)
        {
            AdvanceAndExpect(TokenType.L_PAREN, $"Expected an opening '(' for the constructor call to '{structSymbol.Name}'.");

            TempValue instance = CreateNewInstance(structSymbol);

            List<Value> arguments = ParseArgumentList();

            AdvanceAndExpect(TokenType.R_PAREN, $"Expected closing ')' for the constructor call to '{structSymbol.Name}'.");

            // Check if an `init` method should be called.
            if (structSymbol.Constructors.Count != 0)
            {
                foreach (Value arg in arguments)
                {
                    _currentParseState.AddCodeInstruction(new InstructionLine(arg is ReferenceValue ? InstructionCode.LoadAddress : InstructionCode.PushParam, ResolveValue(arg)));
                }

                TempValue ignoredResult = new TempValue(_currentParseState.NextTempNumber++);

                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.CallMethod,
                    ignoredResult,
                    instance,
                    new StringValue(Mangler.Mangle("init", arguments.Count)
                )));
            }
            else if (arguments.Count > 0)
            {
                // No user-defined constructor, but arguments were provided. This is an error.
                Token errorToken = _lexer.PeekCurrentToken();
                ConstructAndThrowParserException(
                    $"Invalid constructor call for '{structSymbol.Name}'. Struct '{structSymbol.Name}' has no 'init' constructor and cannot be called with arguments.",
                    errorToken
                );
            }

            return instance;
        }

        /// <summary>
        /// Parses a direct struct initializer using brace syntax.
        /// </summary>
        /// <param name="structSymbol">The symbol for the struct being instantiated.</param>
        /// <returns>A TempValue that will hold the new struct instance at runtime.</returns>
        private TempValue ParseDirectInitializer(StructSymbol structSymbol)
        {
            AdvanceAndExpect(TokenType.L_BRACE, $"an opening '{{' for the direct initializer of '{structSymbol.Name}'.");

            TempValue instance = CreateNewInstance(structSymbol);
            HashSet<string> initializedFields = new HashSet<string>();

            if (!_lexer.TokenTypeMatches(TokenType.R_BRACE))
            {
                do
                {
                    Token fieldToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a field name in the struct initializer.");
                    string fieldName = fieldToken.Text;

                    if (!structSymbol.Fields.Contains(fieldName))
                    {
                        ConstructAndThrowParserException($"Invalid field '{fieldName}'. Struct '{structSymbol.Name}' does not have a field with this name.", fieldToken);
                    }
                    if (!initializedFields.Add(fieldName))
                    {
                        ConstructAndThrowParserException($"Duplicate field '{fieldName}'. Each field can only be initialized once.", fieldToken);
                    }

                    AdvanceAndExpect(TokenType.COLON, $"Expected a ':' after the field name '{fieldName}'.");
                    Value fieldValue = ParseExpression();

                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.SetField, instance, new StringValue(fieldName), ResolveValue(fieldValue)));

                } while (AdvanceTokenIfMatch(TokenType.COMMA));
            }

            AdvanceAndExpect(TokenType.R_BRACE, "Expected a closing '}' to end the struct initializer.");

            return instance;
        }

        /// <summary>
        /// A helper method that generates the NewInstance bytecode instruction for a given struct.
        /// </summary>
        private TempValue CreateNewInstance(StructSymbol symbol)
        {
            TempValue instance = new TempValue(_currentParseState.NextTempNumber++);
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.NewInstance, instance, symbol));
            return instance;
        }

        /// <summary>
        /// Parses postfix expressions, which include function calls `()`, index access `[]`, and property access `.`.
        /// This method is called repeatedly in a loop to handle chained accesses.
        /// </summary>
        /// <returns>A Value representing the result of the access chain.</returns>
        private Value ParseAccess()
        {
            Value left = ParsePrimary();

            while (true)
            {
                TokenType type = _lexer.PeekNextTokenType();

                // Access get/set.
                if (type == TokenType.L_BRACKET)
                {
                    left = ParseIndexAccess(left);
                }
                // Property access.
                else if (type == TokenType.DOT)
                {
                    _lexer.Advance(); // Consume the dot.

                    Token memberToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected a member name after '.' .");

                    switch (left)
                    {
                        case VariableValue variable:
                            if (_currentParseState.CurrentScope.TryResolve(variable.Name, out Symbol symbol) && symbol is EnumSymbol enumSymbol)
                            {
                                if (enumSymbol.Members.TryGetValue(memberToken.Text, out EnumValue enumValue))
                                {
                                    left = enumValue;
                                }
                                else
                                {
                                    ConstructAndThrowParserException($"Enum '{enumSymbol.Name}' does not have a member named '{memberToken.Text}'.", memberToken);
                                }
                            }
                            else
                            {
                                left = new PropertyAccessValue(left, memberToken.Text);
                            }
                            break;
                        case StaticStructAccess staticAccess:
                            left = new StaticStructAccess(staticAccess.Struct, memberToken.Text);
                            break;
                        default:
                            left = new PropertyAccessValue(left, memberToken.Text);
                            break;
                    }
                }
                else if (type == TokenType.L_PAREN)
                {
                    left = ParseFunctionCall(left);
                }
                else
                {
                    break;
                }
            }

            return left;
        }

        /// <summary>
        /// Parses a function or method call, assuming the callable expression (`left`) has already been parsed.
        /// </summary>
        private TempValue ParseFunctionCall(Value callable)
        {
            _lexer.Advance(); // Consume '('.
            List<Value> arguments = ParseArgumentList();

            AdvanceAndExpect(TokenType.R_PAREN, "Expected a closing ')' for function call after function arguments.");

            foreach (Value arg in arguments)
            {
                _currentParseState.AddCodeInstruction(new InstructionLine(arg is ReferenceValue ? InstructionCode.LoadAddress : InstructionCode.PushParam, ResolveValue(arg)));
            }

            TempValue result = new TempValue(_currentParseState.NextTempNumber++);
            string templated;

            if (callable is PropertyAccessValue propAccess)
            {
                templated = Mangler.Mangle(propAccess.FieldName, arguments.Count);

                _currentParseState.AddCodeInstruction(new InstructionLine(
                   InstructionCode.CallMethod,
                   result,
                   ResolveValue(propAccess.Target),
                   new StringValue(templated)
               ));
            }
            else if (callable is StaticStructAccess statAccess)
            {
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.CallStatic,
                    result,
                    statAccess.Struct,
                    new StringValue(Mangler.Mangle(statAccess.Name, arguments.Count))
                ));
            }
            else if (callable is LambdaValue lambda)
            {
                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.CallFunction,
                    result,
                    lambda.Function,
                    new NumberValue(arguments.Count)
                ));
            }
            else
            {
                VariableValue var = (VariableValue)callable;
                templated = Mangler.Mangle(var.Name, arguments.Count);

                _currentParseState.AddCodeInstruction(new InstructionLine(
                    InstructionCode.CallFunction,
                    result,
                    new VariableValue(templated),
                    new NumberValue(arguments.Count)
                ));
            }

            return result;
        }

        /// <summary>
        /// Parses an 'N times' statement that accepts either a raw integer number, or a variable that is a number.
        /// </summary>
        /// <param name="count">The amount of times to repeat the statements or the expression.</param>
        private void ParseTimesStatement(Value count)
        {
            _lexer.Advance(); // Consume 'times'.

            Value condition;

            if (_lexer.PeekNextTokenType() == TokenType.AS)
            {
                _lexer.Advance();
                bool isSolid = false;

                if (_lexer.PeekNextTokenType() == TokenType.SOLID)
                {
                    isSolid = true;
                    _lexer.Advance();
                }
                Token nameToken = ConsumeAndExpect(TokenType.IDENTIFIER, "Expected an identifier for a 'x times as y' statement");
                condition = new VariableValue(nameToken.Text, isSolid);
                GenerateWriteBackInstruction(condition, NumberValue.Zero);
            }
            else
            {
                condition = new TempValue(_currentParseState.NextTempNumber++);
                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Assign, condition, NumberValue.Zero));
            }

            TempValue truthy = new TempValue(_currentParseState.NextTempNumber++);

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GreaterEqual, truthy, condition, count));
            int loopStartIndex = _currentParseState.CodeInstructions.Count;

            LoopContext loopContext = new LoopContext();
            _currentParseState.ActiveLoopContexts.Push(loopContext);

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GotoIfTrue, null!, truthy));
            int loopExitPatch = _currentParseState.CodeInstructions.Count - 1;

            ParseStatementBody("Expected an '->' for a single-line while loop body.");

            _lexer.InsertNextToken(TokenType.EOL);

            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.IncrementIntUnrestricted, condition));
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, new NumberValue(loopStartIndex - 1)));

            int loopEndIndex = _currentParseState.CodeInstructions.Count;

            int continueAddress = loopStartIndex;
            PatchLoopExits(loopContext, loopEndIndex, continueAddress);
            _currentParseState.CodeInstructions[loopExitPatch].Lhs = new NumberValue(loopEndIndex);

            _currentParseState.ActiveLoopContexts.Pop();
        }

        /// <summary>
        /// Parses the body of a lambda expression.
        /// </summary>
        /// <returns>The parsed lambda value.</returns>
        private LambdaValue ParseLambda()
        {
            // '(' is already consumed.

            int startAddressInSource = _lexer.PeekCurrentToken().LineInSourceCode;

            List<string> args = new List<string>();
            HashSet<string> argsByRef = new HashSet<string>();
            bool argByRef = false;

            while (true)
            {
                TokenType type = _lexer.PeekNextTokenType();
                if (type == TokenType.COMMA)
                {
                    _lexer.Advance();
                }
                else if (type == TokenType.REF)
                {
                    argByRef = true;
                    _lexer.Advance();

                    if (_lexer.PeekNextTokenType() != TokenType.IDENTIFIER)
                    {
                        ConstructAndThrowParserException("Expected an argument identifier after a 'ref' keyword", _lexer.PeekCurrentToken());
                    }
                }
                else if (type == TokenType.IDENTIFIER)
                {
                    Token arg = _lexer.ConsumeToken();
                    args.Add(arg.Text);

                    if (argByRef)
                    {
                        argByRef = false;
                        argsByRef.Add(arg.Text);
                    }
                }
                else if (type == TokenType.R_PAREN)
                {
                    break;
                }
                else
                {
                    ConstructAndThrowParserException($"Unidentified token inside lambda argument list: {_lexer.PeekNextToken()}, expected only identifiers", _lexer.PeekNextToken());
                }
            }

            AdvanceAndExpect(TokenType.R_PAREN, "Expected a closing ')' for lambda declaration");
            AdvanceAndExpect(TokenType.ARROW, "Expected an '=>' for the beginning of the lambda body");

            int lambdaBodySkipIndex = _currentParseState.CodeInstructions.Count;
            _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Goto, null!));

            int lambdaCodeStartIndex = _currentParseState.CodeInstructions.Count;

            if (_lexer.PeekNextTokenType() == TokenType.L_BRACE)
            {
                ParseBlockStatement();
                _lexer.InsertNextToken(TokenType.EOL);
                // If block doesnt end with return the VM will be stuck in an infinite loop.
                if (_currentParseState.CodeInstructions[^1].Instruction != InstructionCode.Return)
                {
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Return, NilValue.NilInstance));
                }
            }
            else
            {
                Value ret = ResolveValue(ParseTernary());
                _currentParseState.CodeInstructions.Add(new InstructionLine(InstructionCode.Return, ret));
            }

            _currentParseState.CodeInstructions[lambdaBodySkipIndex].Lhs = new NumberValue(_currentParseState.CodeInstructions.Count);

            FunctionValue lambdaFunction = new FunctionValue($"lambda__{args.Count}", args.Count, lambdaCodeStartIndex, startAddressInSource, args, argsByRef);
            lambdaFunction.SetScope(_currentParseState.CurrentScope);

            return new LambdaValue(lambdaFunction);
        }

        /// <summary>
        /// Parses a comma-separated list of arguments until a closing parenthesis is encountered.
        /// </summary>
        /// <returns>A list of Values representing the parsed arguments.</returns>
        private List<Value> ParseArgumentList()
        {
            List<Value> arguments = new List<Value>();
            if (!_lexer.TokenTypeMatches(TokenType.R_PAREN))
            {
                do
                {
                    arguments.Add(ParseTernary());
                } while (AdvanceTokenIfMatch(TokenType.COMMA));
            }
            return arguments;
        }

        /// <summary>
        /// Parses a custom <see cref="TokenType"/>-separated list of one or more expressions.
        /// </summary>
        /// <returns>A list of Value objects representing the parsed expressions.</returns>
        private List<Value> ParseTokenSeparatedArguments(TokenType token)
        {
            List<Value> arguments = new List<Value>();
            do
            {
                arguments.Add(ParseTernary());
            } while (AdvanceTokenIfMatch(token));

            return arguments;
        }

        /// <summary>
        /// Parses an index access expression assuming the collection has been parsed.
        /// </summary>
        private ElementAccessValue ParseIndexAccess(Value left)
        {
            _lexer.Advance(); // Consume '['.

            Value index = ParseExpression();

            AdvanceAndExpect(TokenType.R_BRACKET, "Expected a closing ']' for the index accessor.");

            // Creates a descriptor for the access. This will be resolved into a GetElement
            // or SetElement instruction by a higher-level parsing method.
            return new ElementAccessValue(left, index);
        }

        /// <summary>
        /// Parses a primary expression, which is the highest level of precedence.
        /// This includes literals (numbers, strings, etc.), identifiers, grouping parentheses,
        /// and prefix unary operators.
        /// </summary>
        /// <returns>A Value representing the parsed primary expression.</returns>
        private Value ParsePrimary()
        {
            if (AdvanceTokenIfMatch(TokenType.TYPE_OF))
            {
                Value operand = ParseAccess();

                TempValue resultRegister = new TempValue(_currentParseState.NextTempNumber++);

                Value typeOperand;
                if (operand is VariableValue varValue)
                {
                    bool found = _currentParseState.CurrentScope.TryResolve(varValue.Name, out Symbol sb);
                    if (found && sb is VariableSymbol)
                    {
                        typeOperand = varValue;
                    }
                    else
                    {
                        // It's a raw type name.
                        typeOperand = new StringValue(varValue.Name);
                    }
                }
                else
                {
                    typeOperand = operand;
                }

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.GetType, resultRegister, typeOperand));

                return resultRegister;
            }

            Token token = _lexer.ConsumeToken();

            if (token.Type == TokenType.NIL)
            {
                return NilValue.NilInstance;
            }

            if (token.Type is TokenType.MINUS or TokenType.BANG or TokenType.TILDE)
            {
                Value operand = ParsePrimary();

                if (operand is NumberValue numVal)
                {
                    if (token.Type == TokenType.MINUS)
                    {
                        switch (numVal.Type)
                        {
                            case NumberValue.NumberType.Integer:
                                return new NumberValue(-Convert.ToInt32(numVal.Value), numVal.Type);
                            case NumberValue.NumberType.Float:
                                return new NumberValue(-float.Parse(numVal.Value.ToString()!), numVal.Type);
                            case NumberValue.NumberType.Double:
                                return new NumberValue(-Convert.ToDouble(numVal.Value), numVal.Type);
                        }
                    }
                    else
                    {
                        return new BooleanValue((int)numVal.Value == 0);
                    }
                }

                Value temp = new TempValue(_currentParseState.NextTempNumber++);

                if (token.Type == TokenType.TILDE)
                {
                    _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.BitwiseNot, temp, operand));
                    return temp;
                }

                _currentParseState.AddCodeInstruction(new InstructionLine(InstructionCode.Negate, temp, operand));
                return temp;
            }

            switch (token.Type)
            {
                case TokenType.IDENTIFIER:
                    string name = token.Text;
                    if (_currentParseState.CurrentScope.TryResolve(name, out Symbol symbol) && symbol is StructSymbol structSymbol)
                    {
                        // It's a struct, check if it's a constructor call Vec2(2,3).
                        // or a direct initializer Vec2{ x: 2, y: 3 }.
                        if (_lexer.TokenTypeMatches(TokenType.L_PAREN))
                        {
                            return ParseConstructorCall(structSymbol);
                        }
                        else if (_lexer.TokenTypeMatches(TokenType.L_BRACE))
                        {
                            return ParseDirectInitializer(structSymbol);
                        }
                        // Static struct field or method.
                        else if (_lexer.TokenTypeMatches(TokenType.DOT))
                        {
                            return new StaticStructAccess(structSymbol, null!);
                        }
                        else
                        {
                            // This is most likely the raw name of a type, most likely for the 'typeof' operator.
                            return new StringValue(name);
                        }
                    }
                    else
                    {
                        // "x times" consumes the identifier, and dispatches the appropriate method.
                        // But must return a value, so we return StatementComplete.
                        if (_lexer.PeekNextTokenType() == TokenType.TIMES)
                        {
                            ParseTimesStatement(new VariableValue(name));
                            return StatementCompleteValue.StatementCompleted;
                        }

                        // Otherwise, it's just a regular variable.
                        return new VariableValue(name);
                    }
                case TokenType.NUMBER:
                    // "x times" consumes the number, and dispatches the appropriate method.
                    // But must return a value, so we return StatementComplete.
                    if (_lexer.PeekNextTokenType() == TokenType.TIMES)
                    {
                        ParseTimesStatement(NumberValue.FromToken(token));
                        return StatementCompleteValue.StatementCompleted;
                    }
                    return NumberValue.FromToken(token);
                case TokenType.STRING: return new StringValue(token.Literal.ToString()!);
                case TokenType.TRUE: return BooleanValue.True;
                case TokenType.FALSE: return BooleanValue.False;
                case TokenType.F_STRING: return ParseFString(token.Literal);
                case TokenType.CHARACTER: return new CharValue((char)token.Literal);
                case TokenType.L_BRACKET: return ParseList();
                case TokenType.MATCH: return ParseMatchStatement();
                case TokenType.REF: return new ReferenceValue((VariableValue)ParseExpression());
                case TokenType.SELF:
                    if (_currentParseState.CurrentStructContext == null)
                    {
                        ConstructAndThrowParserException("The 'self' keyword can only be used inside a struct method.", token);
                    }
                    // The 'self' keyword is just a special, pre-defined local variable.
                    // At runtime, the VM will ensure the instance is available.
                    return new VariableValue("self");
                case TokenType.L_PAREN:
                    if (IsALambda())
                    {
                        return ParseLambda();
                    }
                    Value expr = ParseTernary();
                    AdvanceAndExpect(TokenType.R_PAREN, "Expected: a closing ')' to match the opening parenthesis.");
                    return expr;
            }

            // If we've fallen through the entire switch, we have an invalid token.
            ConstructAndThrowParserException($"Expected an expression, a literal (number, string, etc.), a variable, or '('.", token);
            return null!;
        }

        /// <summary>
        /// Parses the body of a statement, whether a block body or a single line expression.
        /// </summary>
        /// <param name="errorMsgForSingleLine">The error to display when there is no '->' in a single line expression body.</param>
        private void ParseStatementBody(string errorMsgForSingleLine)
        {
            if (_lexer.TokenTypeMatches(TokenType.THIN_ARROW) && _lexer.PeekTokenTypeAheadByN(2) == TokenType.TRAIN_PIPE)
            {
                ParseImitationBlockStatement(TokenType.THIN_ARROW, TokenType.EOL);
            }
            else if (_lexer.TokenTypeMatches(TokenType.L_BRACE))
            {
                ParseBlockStatement();
            }
            else
            {
                AdvanceAndExpect(TokenType.THIN_ARROW, errorMsgForSingleLine);
                ParseStatement();
            }
        }

        /// <summary>
        /// Checks if the next token's type matches the expected type.
        /// If it matches, the token is consumed and the method returns true.
        /// If it does not match, the token is not consumed and the method returns false.
        /// </summary>
        private bool AdvanceTokenIfMatch(TokenType expectedType)
        {
            if (_lexer.TokenTypeMatches(expectedType))
            {
                _lexer.Advance();
                return true;
            }

            return false;
        }

        /// <summary>
        /// Helper method to handle patching 'break' and 'continue'.
        /// </summary>
        private void PatchLoopExits(LoopContext loopContext, int breakAddress, int continueAddress)
        {
            foreach (int patchIndex in loopContext.BreakPatchAddresses)
            {
                _currentParseState.CodeInstructions[patchIndex].Lhs = new NumberValue(breakAddress);
            }

            foreach (int patchIndex in loopContext.ContinuePatchAddresses)
            {
                _currentParseState.CodeInstructions[patchIndex].Lhs = new NumberValue(continueAddress);
            }
        }

        /// <summary>
        /// Consumes the next token from the lexer and throws a formatted parser exception if it does not match the expected type.
        /// </summary>
        /// <param name="expectedType">The TokenType that is grammatically required at this point in the stream.</param>
        /// <returns>The consumed token if it matches the expected type.</returns>
        /// <exception cref="FluenceParserException">Thrown if the consumed token's type does not match the expectedType.</exception>
        private Token ConsumeAndExpect(TokenType expectedType, string errorMessage)
        {
            Token token = _lexer.ConsumeToken();
            if (token.Type != expectedType)
            {
                ConstructAndThrowParserException(errorMessage, token);
            }
            return token;
        }

        /// <summary>
        /// Verifies that the next token in the stream is of the expected type and advances the stream.
        /// </summary>
        /// <param name="expectedType">The TokenType that is grammatically required.</param>
        /// <param name="expectedDescription">A user-friendly description of what was expected, for error reporting.</param>
        /// <exception cref="FluenceParserException">Thrown if the next token's type does not match.</exception>
        private void AdvanceAndExpect(TokenType expectedType, string errorMessage)
        {
            if (!_lexer.TokenTypeMatches(expectedType))
            {
                ConstructAndThrowParserException(errorMessage, _lexer.PeekCurrentToken());
            }
            _lexer.Advance();
        }

        private void ConstructAndThrowParserException(string errorMessage, Token token)
        {
            ParserExceptionContext context = new ParserExceptionContext()
            {
                FileName = _currentParsingFileName,
                Column = token.ColumnInSourceCode,
                FaultyLine = FluenceDebug.TruncateLine(FluenceLexer.GetCodeLineFromSource(_lexer.SourceCode, token.LineInSourceCode)),
                LineNum = token.LineInSourceCode,
                UnexpectedToken = token,
            };
            throw new FluenceParserException(errorMessage, context);
        }

        /// <summary>
        /// Peeks ahead to see whether an expression that starts with a left parentheses is a lambda declaration.
        /// </summary>
        /// <returns>True if it is.</returns>
        private bool IsALambda()
        {
            int lookAhead = 1;

            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookAhead);

                if (type is not TokenType.COMMA and not TokenType.IDENTIFIER and not TokenType.R_PAREN and not TokenType.REF)
                {
                    return false;
                }

                if (type == TokenType.R_PAREN && _lexer.PeekTokenTypeAheadByN(lookAhead + 1) == TokenType.ARROW)
                {
                    return true;
                }

                lookAhead++;
            }
        }

        /// <summary>
        /// Checks if an assignment operator pipe is of the optional type.
        /// </summary>
        /// <param name="type"></param>
        /// <returns>True if it is an optional assignment pipe operator.</returns>
        private static bool IsOptionalChainAssignmentOperator(TokenType type) =>
            type is TokenType.OPTIONAL_ASSIGN_N or TokenType.OPTIONAL_REST_ASSIGN or TokenType.OPTIONAL_CHAIN_N_UNIQUE_ASSIGN;

        /// <summary>
        /// Checks if a token type is a multiplicative operator (*, /, %).
        /// </summary>
        private static bool IsMultiplicativeOperator(TokenType type) =>
            type is TokenType.STAR or TokenType.SLASH or TokenType.PERCENT;

        /// <summary>
        /// Checks if a token type is a simple assignment operator (=, +=, -=, etc.).
        /// </summary>
        private static bool IsSimpleAssignmentOperator(TokenType type) =>
            type is >= TokenType.EQUAL and <= TokenType.EQUAL_AMPERSAND;

        /// <summary>
        /// Checks if a token type is one of the chain-assignment operators (<|, <n|, <?|, etc.).
        /// </summary>
        private static bool IsChainAssignmentOperator(TokenType type) =>
            type is >= TokenType.CHAIN_ASSIGN_N and <= TokenType.OPTIONAL_SEQUENTIAL_REST_ASSIGN;

        /// <summary>
        /// Checks if a token type is a multi-target compound assignment operator (.+=, .-=, etc.).
        /// </summary>
        private static bool IsMultiCompoundAssignmentOperator(TokenType type) => type switch
        {
            TokenType.DOT_PLUS_EQUAL or
            TokenType.DOT_MINUS_EQUAL or
            TokenType.DOT_STAR_EQUAL or
            TokenType.DOT_SLASH_EQUAL => true,
            _ => false,
        };

        /// <summary>
        /// Checks if a token type is a standard comparison operator (>, <, >=, <=).
        /// </summary>
        private static bool IsStandardComparisonOperator(TokenType type) =>
            type is TokenType.GREATER or
            TokenType.LESS or
            TokenType.GREATER_EQUAL or
            TokenType.LESS_EQUAL;

        /// <summary>
        /// Checks if a token type is a collective comparison operator (<==|, <||==|, etc.).
        /// </summary>
        private static bool IsCollectiveOperator(TokenType type) =>
            type is >= TokenType.COLLECTIVE_EQUAL and <= TokenType.COLLECTIVE_OR_GREATER_EQUAL;

        /// <summary>
        /// Peeks ahead to determine if a match statement is using the switch-style syntax (`case:`)
        /// or the expression-style syntax (`case ->`).
        /// </summary>
        private bool IsSwitchStyleMatch()
        {
            int lookAhead = 1;
            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookAhead);
                if (type is TokenType.THIN_ARROW or TokenType.ARROW) return false;
                if (type == TokenType.COLON) return true;
                if (type == TokenType.R_BRACE) return false; // Empty match.
                lookAhead++;
            }
        }

        /// <summary>
        /// Peeks ahead to see if the upcoming tokens form a collective comparison expression.
        /// </summary>
        private bool IsCollectiveComparisonAhead()
        {
            int lookahead = 1;
            bool hasComma = false;

            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookahead);

                if (type == TokenType.COMMA) hasComma = true;

                if (IsCollectiveOperator(type) && hasComma)
                {
                    return true;
                }

                if (type is TokenType.L_BRACE or TokenType.THIN_ARROW or TokenType.EOF or TokenType.EOL)
                {
                    return false;
                }

                lookahead++;
            }
        }

        /// <summary>
        /// Peeks ahead in the token stream to determine if a broadcast pipe call is coming up.
        /// </summary>
        private bool IsBroadCastPipeFunctionCall()
        {
            int lookahead = 3;
            bool hasUnderscore = false;

            while (true)
            {
                TokenType type = _lexer.PeekTokenTypeAheadByN(lookahead);

                if (type == TokenType.R_PAREN) break; // End of argument list.
                if (type == TokenType.EOL)
                {
                    return false;
                }

                if (type == TokenType.EOF) return false; // End of file, not a valid call.

                if (type == TokenType.UNDERSCORE) hasUnderscore = true;

                lookahead++;
                if (_lexer.PeekTokenTypeAheadByN(lookahead) == TokenType.COMMA)
                {
                    lookahead++;
                }
            }

            // The next token must be a chain assignment operator.
            return hasUnderscore && IsChainAssignmentOperator(_lexer.PeekTokenTypeAheadByN(lookahead + 1));
        }

        /// <summary>
        /// Converts a multi-target compound assignment TokenType into its corresponding arithmetic InstructionCode.
        /// </summary>
        private static InstructionCode GetInstructionCodeForMultiCompoundAssignment(TokenType type) => type switch
        {
            TokenType.DOT_STAR_EQUAL => InstructionCode.Multiply,
            TokenType.DOT_SLASH_EQUAL => InstructionCode.Divide,
            TokenType.DOT_PLUS_EQUAL => InstructionCode.Add,
            TokenType.DOT_MINUS_EQUAL => InstructionCode.Subtract,
        };

        /// <summary>
        /// Checks whether the operator is not a simple comparison operator, rather a complex one like collective comparison.
        /// </summary>
        /// <param name="type">The type of the token.</param>
        private static bool IsNotAStandardComparison(TokenType type)
        {
            return !IsStandardComparisonOperator(type) && type != TokenType.EQUAL_EQUAL && type != TokenType.BANG_EQUAL;
        }

        /// <summary>
        /// Checks if the operator is a collective OR operator.
        /// </summary>
        /// <param name="type">The type of the token.</param>
        /// <returns>True if it is.</returns>
        private static bool IsOrCollectiveOperator(TokenType type) =>
            type is >= TokenType.COLLECTIVE_OR_EQUAL and <= TokenType.COLLECTIVE_OR_GREATER_EQUAL;

        /// <summary>
        /// Converts a collective comparison TokenType into its corresponding base comparison InstructionCode.
        /// </summary>
        /// <param name="type">The TokenType of the collective comparison operator.</param>
        /// <returns>The corresponding base InstructionCode.</returns>
        private static InstructionCode GetInstructionCodeForCollectiveOp(TokenType type) => type switch
        {
            TokenType.COLLECTIVE_EQUAL => InstructionCode.Equal,
            TokenType.COLLECTIVE_NOT_EQUAL => InstructionCode.NotEqual,
            TokenType.COLLECTIVE_GREATER => InstructionCode.GreaterThan,
            TokenType.COLLECTIVE_GREATER_EQUAL => InstructionCode.GreaterEqual,
            TokenType.COLLECTIVE_LESS => InstructionCode.LessThan,
            TokenType.COLLECTIVE_LESS_EQUAL => InstructionCode.LessEqual,
            TokenType.COLLECTIVE_OR_EQUAL => InstructionCode.Equal,
            TokenType.COLLECTIVE_OR_NOT_EQUAL => InstructionCode.NotEqual,
            TokenType.COLLECTIVE_OR_LESS => InstructionCode.LessEqual,
            TokenType.COLLECTIVE_OR_LESS_EQUAL => InstructionCode.LessEqual,
            TokenType.COLLECTIVE_OR_GREATER => InstructionCode.GreaterThan,
            TokenType.COLLECTIVE_OR_GREATER_EQUAL => InstructionCode.GreaterEqual,
        };
    }
}